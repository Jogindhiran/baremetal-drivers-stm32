
015_InputInterrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001454  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001624  08001624  00002624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001668  08001668  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001668  08001668  00002668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001670  08001670  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001670  08001670  00002670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001674  08001674  00002674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001678  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  2000005c  080016d4  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  080016d4  000031d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000018d8  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000070f  00000000  00000000  00004964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a0  00000000  00000000  00005078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000011c  00000000  00000000  00005218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000205f  00000000  00000000  00005334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002319  00000000  00000000  00007393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090de0  00000000  00000000  000096ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009a48c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c94  00000000  00000000  0009a4d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0009b164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800160c 	.word	0x0800160c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	0800160c 	.word	0x0800160c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	db0b      	blt.n	80002da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	f003 021f 	and.w	r2, r3, #31
 80002c8:	4907      	ldr	r1, [pc, #28]	@ (80002e8 <__NVIC_EnableIRQ+0x38>)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	095b      	lsrs	r3, r3, #5
 80002d0:	2001      	movs	r0, #1
 80002d2:	fa00 f202 	lsl.w	r2, r0, r2
 80002d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	e000e100 	.word	0xe000e100

080002ec <pc13_exti_init>:
#include "exti.h"

#define GPIOCEN		(1U<<2)
#define SYSCFGEN	(1U<<14)

void pc13_exti_init(void) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002f0:	b672      	cpsid	i
}
 80002f2:	bf00      	nop
	/*1. Disable global interrupts*/
	__disable_irq(); //Inbuilt function in Cortex-M.h series MCU

	/*2. Enable clock access for GPIOC*/
	RCC->AHB1ENR |= GPIOCEN;
 80002f4:	4b18      	ldr	r3, [pc, #96]	@ (8000358 <pc13_exti_init+0x6c>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f8:	4a17      	ldr	r2, [pc, #92]	@ (8000358 <pc13_exti_init+0x6c>)
 80002fa:	f043 0304 	orr.w	r3, r3, #4
 80002fe:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PC13 as input pin*/
	GPIOC->MODER &= ~(1U<<26);
 8000300:	4b16      	ldr	r3, [pc, #88]	@ (800035c <pc13_exti_init+0x70>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a15      	ldr	r2, [pc, #84]	@ (800035c <pc13_exti_init+0x70>)
 8000306:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800030a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(1U<<27);
 800030c:	4b13      	ldr	r3, [pc, #76]	@ (800035c <pc13_exti_init+0x70>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a12      	ldr	r2, [pc, #72]	@ (800035c <pc13_exti_init+0x70>)
 8000312:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8000316:	6013      	str	r3, [r2, #0]

	/*3. Enable clock access to SYSCFG (System Configuration Register contains EXTI)*/
	RCC->APB2ENR |= SYSCFGEN;
 8000318:	4b0f      	ldr	r3, [pc, #60]	@ (8000358 <pc13_exti_init+0x6c>)
 800031a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800031c:	4a0e      	ldr	r2, [pc, #56]	@ (8000358 <pc13_exti_init+0x6c>)
 800031e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000322:	6453      	str	r3, [r2, #68]	@ 0x44

	/*4. Select PORTC for EXTI13*/
	SYSCFG->EXTICR[3] |= (1U<<5);
 8000324:	4b0e      	ldr	r3, [pc, #56]	@ (8000360 <pc13_exti_init+0x74>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	4a0d      	ldr	r2, [pc, #52]	@ (8000360 <pc13_exti_init+0x74>)
 800032a:	f043 0320 	orr.w	r3, r3, #32
 800032e:	6153      	str	r3, [r2, #20]

	/*5. Unmask EXTI13*/
	EXTI->IMR |= (1U<<13); //Enabling interrupt access to EXTI13
 8000330:	4b0c      	ldr	r3, [pc, #48]	@ (8000364 <pc13_exti_init+0x78>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a0b      	ldr	r2, [pc, #44]	@ (8000364 <pc13_exti_init+0x78>)
 8000336:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800033a:	6013      	str	r3, [r2, #0]

	/*6. Select falling edge trigger*/
	EXTI->FTSR |= (1U<<13);
 800033c:	4b09      	ldr	r3, [pc, #36]	@ (8000364 <pc13_exti_init+0x78>)
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	4a08      	ldr	r2, [pc, #32]	@ (8000364 <pc13_exti_init+0x78>)
 8000342:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000346:	60d3      	str	r3, [r2, #12]

	/*7. Enable EXTI13 line in NVIC*/
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000348:	2028      	movs	r0, #40	@ 0x28
 800034a:	f7ff ffb1 	bl	80002b0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800034e:	b662      	cpsie	i
}
 8000350:	bf00      	nop

	/*8. Enable global interrupts*/
	__enable_irq();
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40023800 	.word	0x40023800
 800035c:	40020800 	.word	0x40020800
 8000360:	40013800 	.word	0x40013800
 8000364:	40013c00 	.word	0x40013c00

08000368 <main>:
int key_int;

void keyRead(int keyint);
static void exti_callback(void);

int main(void) {
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	//1.Enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 800036c:	4b13      	ldr	r3, [pc, #76]	@ (80003bc <main+0x54>)
 800036e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000370:	4a12      	ldr	r2, [pc, #72]	@ (80003bc <main+0x54>)
 8000372:	f043 0301 	orr.w	r3, r3, #1
 8000376:	6313      	str	r3, [r2, #48]	@ 0x30

	//2.Set PA5 as output pin
	GPIOA->MODER |= (1U<<10);
 8000378:	4b11      	ldr	r3, [pc, #68]	@ (80003c0 <main+0x58>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a10      	ldr	r2, [pc, #64]	@ (80003c0 <main+0x58>)
 800037e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000382:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<11);
 8000384:	4b0e      	ldr	r3, [pc, #56]	@ (80003c0 <main+0x58>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a0d      	ldr	r2, [pc, #52]	@ (80003c0 <main+0x58>)
 800038a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800038e:	6013      	str	r3, [r2, #0]

	uart2_rxtx_init();
 8000390:	f000 f922 	bl	80005d8 <uart2_rxtx_init>

	pc13_exti_init();
 8000394:	f7ff ffaa 	bl	80002ec <pc13_exti_init>

	while(1) {
		key = uart2_read();
 8000398:	f000 f98e 	bl	80006b8 <uart2_read>
 800039c:	4603      	mov	r3, r0
 800039e:	461a      	mov	r2, r3
 80003a0:	4b08      	ldr	r3, [pc, #32]	@ (80003c4 <main+0x5c>)
 80003a2:	701a      	strb	r2, [r3, #0]
		key_int = key - '0';
 80003a4:	4b07      	ldr	r3, [pc, #28]	@ (80003c4 <main+0x5c>)
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	3b30      	subs	r3, #48	@ 0x30
 80003aa:	4a07      	ldr	r2, [pc, #28]	@ (80003c8 <main+0x60>)
 80003ac:	6013      	str	r3, [r2, #0]
		keyRead(key_int);
 80003ae:	4b06      	ldr	r3, [pc, #24]	@ (80003c8 <main+0x60>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 f828 	bl	8000408 <keyRead>
		key = uart2_read();
 80003b8:	bf00      	nop
 80003ba:	e7ed      	b.n	8000398 <main+0x30>
 80003bc:	40023800 	.word	0x40023800
 80003c0:	40020000 	.word	0x40020000
 80003c4:	20000078 	.word	0x20000078
 80003c8:	2000007c 	.word	0x2000007c

080003cc <exti_callback>:
	}
}

static void exti_callback(void) {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	printf("BTN Pressed...\n\r");
 80003d0:	4802      	ldr	r0, [pc, #8]	@ (80003dc <exti_callback+0x10>)
 80003d2:	f000 faaf 	bl	8000934 <iprintf>

	//GPIOA->ODR ^= LED_PIN;	//LED toggle

}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	08001624 	.word	0x08001624

080003e0 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void) {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	if((EXTI->PR & LINE13) != 0) { //PR is pending register
 80003e4:	4b07      	ldr	r3, [pc, #28]	@ (8000404 <EXTI15_10_IRQHandler+0x24>)
 80003e6:	695b      	ldr	r3, [r3, #20]
 80003e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d007      	beq.n	8000400 <EXTI15_10_IRQHandler+0x20>
		/*Clear PR flag*/
		EXTI->PR |= LINE13;
 80003f0:	4b04      	ldr	r3, [pc, #16]	@ (8000404 <EXTI15_10_IRQHandler+0x24>)
 80003f2:	695b      	ldr	r3, [r3, #20]
 80003f4:	4a03      	ldr	r2, [pc, #12]	@ (8000404 <EXTI15_10_IRQHandler+0x24>)
 80003f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003fa:	6153      	str	r3, [r2, #20]

		//Write the required code
		exti_callback();
 80003fc:	f7ff ffe6 	bl	80003cc <exti_callback>
	}
}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}
 8000404:	40013c00 	.word	0x40013c00

08000408 <keyRead>:

void keyRead(int keyint) {
 8000408:	b480      	push	{r7}
 800040a:	b085      	sub	sp, #20
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	int i,j;
	for(i=keyint; i>0; i--) {
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	e022      	b.n	800045c <keyRead+0x54>
		GPIOA->ODR |= LED_PIN;
 8000416:	4b16      	ldr	r3, [pc, #88]	@ (8000470 <keyRead+0x68>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	4a15      	ldr	r2, [pc, #84]	@ (8000470 <keyRead+0x68>)
 800041c:	f043 0320 	orr.w	r3, r3, #32
 8000420:	6153      	str	r3, [r2, #20]
		for(j=0;j<500000;j++);
 8000422:	2300      	movs	r3, #0
 8000424:	60bb      	str	r3, [r7, #8]
 8000426:	e002      	b.n	800042e <keyRead+0x26>
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	3301      	adds	r3, #1
 800042c:	60bb      	str	r3, [r7, #8]
 800042e:	68bb      	ldr	r3, [r7, #8]
 8000430:	4a10      	ldr	r2, [pc, #64]	@ (8000474 <keyRead+0x6c>)
 8000432:	4293      	cmp	r3, r2
 8000434:	ddf8      	ble.n	8000428 <keyRead+0x20>
		GPIOA->ODR &= ~LED_PIN;
 8000436:	4b0e      	ldr	r3, [pc, #56]	@ (8000470 <keyRead+0x68>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a0d      	ldr	r2, [pc, #52]	@ (8000470 <keyRead+0x68>)
 800043c:	f023 0320 	bic.w	r3, r3, #32
 8000440:	6153      	str	r3, [r2, #20]
		for(j=0;j<500000;j++);
 8000442:	2300      	movs	r3, #0
 8000444:	60bb      	str	r3, [r7, #8]
 8000446:	e002      	b.n	800044e <keyRead+0x46>
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	3301      	adds	r3, #1
 800044c:	60bb      	str	r3, [r7, #8]
 800044e:	68bb      	ldr	r3, [r7, #8]
 8000450:	4a08      	ldr	r2, [pc, #32]	@ (8000474 <keyRead+0x6c>)
 8000452:	4293      	cmp	r3, r2
 8000454:	ddf8      	ble.n	8000448 <keyRead+0x40>
	for(i=keyint; i>0; i--) {
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	3b01      	subs	r3, #1
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	2b00      	cmp	r3, #0
 8000460:	dcd9      	bgt.n	8000416 <keyRead+0xe>
	}
}
 8000462:	bf00      	nop
 8000464:	bf00      	nop
 8000466:	3714      	adds	r7, #20
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr
 8000470:	40020000 	.word	0x40020000
 8000474:	0007a11f 	.word	0x0007a11f

08000478 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b086      	sub	sp, #24
 800047c:	af00      	add	r7, sp, #0
 800047e:	60f8      	str	r0, [r7, #12]
 8000480:	60b9      	str	r1, [r7, #8]
 8000482:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000484:	2300      	movs	r3, #0
 8000486:	617b      	str	r3, [r7, #20]
 8000488:	e00a      	b.n	80004a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800048a:	f3af 8000 	nop.w
 800048e:	4601      	mov	r1, r0
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	1c5a      	adds	r2, r3, #1
 8000494:	60ba      	str	r2, [r7, #8]
 8000496:	b2ca      	uxtb	r2, r1
 8000498:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800049a:	697b      	ldr	r3, [r7, #20]
 800049c:	3301      	adds	r3, #1
 800049e:	617b      	str	r3, [r7, #20]
 80004a0:	697a      	ldr	r2, [r7, #20]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	429a      	cmp	r2, r3
 80004a6:	dbf0      	blt.n	800048a <_read+0x12>
  }

  return len;
 80004a8:	687b      	ldr	r3, [r7, #4]
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3718      	adds	r7, #24
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004b2:	b580      	push	{r7, lr}
 80004b4:	b086      	sub	sp, #24
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	60f8      	str	r0, [r7, #12]
 80004ba:	60b9      	str	r1, [r7, #8]
 80004bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004be:	2300      	movs	r3, #0
 80004c0:	617b      	str	r3, [r7, #20]
 80004c2:	e009      	b.n	80004d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80004c4:	68bb      	ldr	r3, [r7, #8]
 80004c6:	1c5a      	adds	r2, r3, #1
 80004c8:	60ba      	str	r2, [r7, #8]
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	4618      	mov	r0, r3
 80004ce:	f000 f877 	bl	80005c0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004d2:	697b      	ldr	r3, [r7, #20]
 80004d4:	3301      	adds	r3, #1
 80004d6:	617b      	str	r3, [r7, #20]
 80004d8:	697a      	ldr	r2, [r7, #20]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	429a      	cmp	r2, r3
 80004de:	dbf1      	blt.n	80004c4 <_write+0x12>
  }
  return len;
 80004e0:	687b      	ldr	r3, [r7, #4]
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	3718      	adds	r7, #24
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}

080004ea <_close>:

int _close(int file)
{
 80004ea:	b480      	push	{r7}
 80004ec:	b083      	sub	sp, #12
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000502:	b480      	push	{r7}
 8000504:	b083      	sub	sp, #12
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
 800050a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000512:	605a      	str	r2, [r3, #4]
  return 0;
 8000514:	2300      	movs	r3, #0
}
 8000516:	4618      	mov	r0, r3
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <_isatty>:

int _isatty(int file)
{
 8000522:	b480      	push	{r7}
 8000524:	b083      	sub	sp, #12
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800052a:	2301      	movs	r3, #1
}
 800052c:	4618      	mov	r0, r3
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000544:	2300      	movs	r3, #0
}
 8000546:	4618      	mov	r0, r3
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
	...

08000554 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800055c:	4a14      	ldr	r2, [pc, #80]	@ (80005b0 <_sbrk+0x5c>)
 800055e:	4b15      	ldr	r3, [pc, #84]	@ (80005b4 <_sbrk+0x60>)
 8000560:	1ad3      	subs	r3, r2, r3
 8000562:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000568:	4b13      	ldr	r3, [pc, #76]	@ (80005b8 <_sbrk+0x64>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d102      	bne.n	8000576 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000570:	4b11      	ldr	r3, [pc, #68]	@ (80005b8 <_sbrk+0x64>)
 8000572:	4a12      	ldr	r2, [pc, #72]	@ (80005bc <_sbrk+0x68>)
 8000574:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000576:	4b10      	ldr	r3, [pc, #64]	@ (80005b8 <_sbrk+0x64>)
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4413      	add	r3, r2
 800057e:	693a      	ldr	r2, [r7, #16]
 8000580:	429a      	cmp	r2, r3
 8000582:	d207      	bcs.n	8000594 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000584:	f000 fa7a 	bl	8000a7c <__errno>
 8000588:	4603      	mov	r3, r0
 800058a:	220c      	movs	r2, #12
 800058c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800058e:	f04f 33ff 	mov.w	r3, #4294967295
 8000592:	e009      	b.n	80005a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000594:	4b08      	ldr	r3, [pc, #32]	@ (80005b8 <_sbrk+0x64>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800059a:	4b07      	ldr	r3, [pc, #28]	@ (80005b8 <_sbrk+0x64>)
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4413      	add	r3, r2
 80005a2:	4a05      	ldr	r2, [pc, #20]	@ (80005b8 <_sbrk+0x64>)
 80005a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005a6:	68fb      	ldr	r3, [r7, #12]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3718      	adds	r7, #24
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20020000 	.word	0x20020000
 80005b4:	00000400 	.word	0x00000400
 80005b8:	20000080 	.word	0x20000080
 80005bc:	200001d0 	.word	0x200001d0

080005c0 <__io_putchar>:
void uart2_rxtx_init(void);
void uart2_tx_init(void);
char uart2_read(void);
void uart2_write(int ch);

int __io_putchar(int ch) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f000 f889 	bl	80006e0 <uart2_write>
	return ch;
 80005ce:	687b      	ldr	r3, [r7, #4]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <uart2_rxtx_init>:

void uart2_rxtx_init(void) { //Initializes both rx and tx modes of UART2
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	/*****Configure UART2 GPIO Pin*****/
	//1. Enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 80005dc:	4b32      	ldr	r3, [pc, #200]	@ (80006a8 <uart2_rxtx_init+0xd0>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e0:	4a31      	ldr	r2, [pc, #196]	@ (80006a8 <uart2_rxtx_init+0xd0>)
 80005e2:	f043 0301 	orr.w	r3, r3, #1
 80005e6:	6313      	str	r3, [r2, #48]	@ 0x30

	//TX setup:
	//2. Set PA2 mode to alternate function mode (PA2 is the TX pin for UART2)
	GPIOA->MODER &= ~(1U<<4); //10 for alternate function mode
 80005e8:	4b30      	ldr	r3, [pc, #192]	@ (80006ac <uart2_rxtx_init+0xd4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a2f      	ldr	r2, [pc, #188]	@ (80006ac <uart2_rxtx_init+0xd4>)
 80005ee:	f023 0310 	bic.w	r3, r3, #16
 80005f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80005f4:	4b2d      	ldr	r3, [pc, #180]	@ (80006ac <uart2_rxtx_init+0xd4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a2c      	ldr	r2, [pc, #176]	@ (80006ac <uart2_rxtx_init+0xd4>)
 80005fa:	f043 0320 	orr.w	r3, r3, #32
 80005fe:	6013      	str	r3, [r2, #0]

	//3. Set PA2 alternate function type to UART_TX (AF07)
	GPIOA->AFR[0] |= (1U<<8); //0111 for AF7
 8000600:	4b2a      	ldr	r3, [pc, #168]	@ (80006ac <uart2_rxtx_init+0xd4>)
 8000602:	6a1b      	ldr	r3, [r3, #32]
 8000604:	4a29      	ldr	r2, [pc, #164]	@ (80006ac <uart2_rxtx_init+0xd4>)
 8000606:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800060a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);
 800060c:	4b27      	ldr	r3, [pc, #156]	@ (80006ac <uart2_rxtx_init+0xd4>)
 800060e:	6a1b      	ldr	r3, [r3, #32]
 8000610:	4a26      	ldr	r2, [pc, #152]	@ (80006ac <uart2_rxtx_init+0xd4>)
 8000612:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000616:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10);
 8000618:	4b24      	ldr	r3, [pc, #144]	@ (80006ac <uart2_rxtx_init+0xd4>)
 800061a:	6a1b      	ldr	r3, [r3, #32]
 800061c:	4a23      	ldr	r2, [pc, #140]	@ (80006ac <uart2_rxtx_init+0xd4>)
 800061e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000622:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<11);
 8000624:	4b21      	ldr	r3, [pc, #132]	@ (80006ac <uart2_rxtx_init+0xd4>)
 8000626:	6a1b      	ldr	r3, [r3, #32]
 8000628:	4a20      	ldr	r2, [pc, #128]	@ (80006ac <uart2_rxtx_init+0xd4>)
 800062a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800062e:	6213      	str	r3, [r2, #32]

	//RX setup:
	//2. Set PA3 mode to alternate function mode (PA3 is the RX pin for UART2)
	GPIOA->MODER &= ~(1U<<6); //10 for alternate function mode
 8000630:	4b1e      	ldr	r3, [pc, #120]	@ (80006ac <uart2_rxtx_init+0xd4>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a1d      	ldr	r2, [pc, #116]	@ (80006ac <uart2_rxtx_init+0xd4>)
 8000636:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800063a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 800063c:	4b1b      	ldr	r3, [pc, #108]	@ (80006ac <uart2_rxtx_init+0xd4>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a1a      	ldr	r2, [pc, #104]	@ (80006ac <uart2_rxtx_init+0xd4>)
 8000642:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000646:	6013      	str	r3, [r2, #0]

	//3. Set PA3 alternate function type to UART_RX (AF07)
	GPIOA->AFR[0] |= (1U<<12); //0111 for AF7
 8000648:	4b18      	ldr	r3, [pc, #96]	@ (80006ac <uart2_rxtx_init+0xd4>)
 800064a:	6a1b      	ldr	r3, [r3, #32]
 800064c:	4a17      	ldr	r2, [pc, #92]	@ (80006ac <uart2_rxtx_init+0xd4>)
 800064e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000652:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<13);
 8000654:	4b15      	ldr	r3, [pc, #84]	@ (80006ac <uart2_rxtx_init+0xd4>)
 8000656:	6a1b      	ldr	r3, [r3, #32]
 8000658:	4a14      	ldr	r2, [pc, #80]	@ (80006ac <uart2_rxtx_init+0xd4>)
 800065a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800065e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<14);
 8000660:	4b12      	ldr	r3, [pc, #72]	@ (80006ac <uart2_rxtx_init+0xd4>)
 8000662:	6a1b      	ldr	r3, [r3, #32]
 8000664:	4a11      	ldr	r2, [pc, #68]	@ (80006ac <uart2_rxtx_init+0xd4>)
 8000666:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800066a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<15);
 800066c:	4b0f      	ldr	r3, [pc, #60]	@ (80006ac <uart2_rxtx_init+0xd4>)
 800066e:	6a1b      	ldr	r3, [r3, #32]
 8000670:	4a0e      	ldr	r2, [pc, #56]	@ (80006ac <uart2_rxtx_init+0xd4>)
 8000672:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000676:	6213      	str	r3, [r2, #32]

	/*****Configure UART2 module*****/
	//1. Enable clock access to UART2
	RCC->APB1ENR |= UART2EN;
 8000678:	4b0b      	ldr	r3, [pc, #44]	@ (80006a8 <uart2_rxtx_init+0xd0>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	4a0a      	ldr	r2, [pc, #40]	@ (80006a8 <uart2_rxtx_init+0xd0>)
 800067e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000682:	6413      	str	r3, [r2, #64]	@ 0x40

	//2. Configure baudrate
	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000684:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000688:	4909      	ldr	r1, [pc, #36]	@ (80006b0 <uart2_rxtx_init+0xd8>)
 800068a:	480a      	ldr	r0, [pc, #40]	@ (80006b4 <uart2_rxtx_init+0xdc>)
 800068c:	f000 f840 	bl	8000710 <uart_set_baudrate>

	//3. Configure the transfer direction
	USART2->CR1 = (CR1_TE | CR1_RE);
 8000690:	4b08      	ldr	r3, [pc, #32]	@ (80006b4 <uart2_rxtx_init+0xdc>)
 8000692:	220c      	movs	r2, #12
 8000694:	60da      	str	r2, [r3, #12]

	//4. Enable UART module
	USART2->CR1 |= CR1_UE;
 8000696:	4b07      	ldr	r3, [pc, #28]	@ (80006b4 <uart2_rxtx_init+0xdc>)
 8000698:	68db      	ldr	r3, [r3, #12]
 800069a:	4a06      	ldr	r2, [pc, #24]	@ (80006b4 <uart2_rxtx_init+0xdc>)
 800069c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006a0:	60d3      	str	r3, [r2, #12]

}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40020000 	.word	0x40020000
 80006b0:	00f42400 	.word	0x00f42400
 80006b4:	40004400 	.word	0x40004400

080006b8 <uart2_read>:
	//4. Enable UART module
	USART2->CR1 |= CR1_UE;

}

char uart2_read(void) {
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
	//1. Make sure the receive data register is not empty
	while(!(USART2->SR & SR_RXNE)) {}
 80006bc:	bf00      	nop
 80006be:	4b07      	ldr	r3, [pc, #28]	@ (80006dc <uart2_read+0x24>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f003 0320 	and.w	r3, r3, #32
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d0f9      	beq.n	80006be <uart2_read+0x6>

	//2. Read Data
	return USART2->DR;
 80006ca:	4b04      	ldr	r3, [pc, #16]	@ (80006dc <uart2_read+0x24>)
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	b2db      	uxtb	r3, r3
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	40004400 	.word	0x40004400

080006e0 <uart2_write>:

void uart2_write(int ch) {
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	//1. Make sure the transmit data register is empty (using status register)
	while(!(USART2->SR & SR_TXE)); //while result is !(0), stop here
 80006e8:	bf00      	nop
 80006ea:	4b08      	ldr	r3, [pc, #32]	@ (800070c <uart2_write+0x2c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0f9      	beq.n	80006ea <uart2_write+0xa>

	//2. Write to transmit data register (DR)
	USART2->DR = (ch & 0xFF); // & with 0xFF to make the data as 8 bit
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4a04      	ldr	r2, [pc, #16]	@ (800070c <uart2_write+0x2c>)
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	6053      	str	r3, [r2, #4]
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	40004400 	.word	0x40004400

08000710 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk,BaudRate); //BRR - Baud Rate Register
 800071c:	6879      	ldr	r1, [r7, #4]
 800071e:	68b8      	ldr	r0, [r7, #8]
 8000720:	f000 f808 	bl	8000734 <compute_uart_bd>
 8000724:	4603      	mov	r3, r0
 8000726:	461a      	mov	r2, r3
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	609a      	str	r2, [r3, #8]
}
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate) {
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + BaudRate/2U)/BaudRate); //Has to be stored in UART BaudRate Register
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	085a      	lsrs	r2, r3, #1
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	441a      	add	r2, r3
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	fbb2 f3f3 	udiv	r3, r2, r3
 800074c:	b29b      	uxth	r3, r3
}
 800074e:	4618      	mov	r0, r3
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
	...

0800075c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800075c:	480d      	ldr	r0, [pc, #52]	@ (8000794 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800075e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000760:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000764:	480c      	ldr	r0, [pc, #48]	@ (8000798 <LoopForever+0x6>)
  ldr r1, =_edata
 8000766:	490d      	ldr	r1, [pc, #52]	@ (800079c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000768:	4a0d      	ldr	r2, [pc, #52]	@ (80007a0 <LoopForever+0xe>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800076c:	e002      	b.n	8000774 <LoopCopyDataInit>

0800076e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000772:	3304      	adds	r3, #4

08000774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000778:	d3f9      	bcc.n	800076e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800077a:	4a0a      	ldr	r2, [pc, #40]	@ (80007a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800077c:	4c0a      	ldr	r4, [pc, #40]	@ (80007a8 <LoopForever+0x16>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000780:	e001      	b.n	8000786 <LoopFillZerobss>

08000782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000784:	3204      	adds	r2, #4

08000786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000788:	d3fb      	bcc.n	8000782 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800078a:	f000 f97d 	bl	8000a88 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800078e:	f7ff fdeb 	bl	8000368 <main>

08000792 <LoopForever>:

LoopForever:
  b LoopForever
 8000792:	e7fe      	b.n	8000792 <LoopForever>
  ldr   r0, =_estack
 8000794:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800079c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80007a0:	08001678 	.word	0x08001678
  ldr r2, =_sbss
 80007a4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80007a8:	200001d0 	.word	0x200001d0

080007ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007ac:	e7fe      	b.n	80007ac <ADC_IRQHandler>
	...

080007b0 <std>:
 80007b0:	2300      	movs	r3, #0
 80007b2:	b510      	push	{r4, lr}
 80007b4:	4604      	mov	r4, r0
 80007b6:	e9c0 3300 	strd	r3, r3, [r0]
 80007ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80007be:	6083      	str	r3, [r0, #8]
 80007c0:	8181      	strh	r1, [r0, #12]
 80007c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80007c4:	81c2      	strh	r2, [r0, #14]
 80007c6:	6183      	str	r3, [r0, #24]
 80007c8:	4619      	mov	r1, r3
 80007ca:	2208      	movs	r2, #8
 80007cc:	305c      	adds	r0, #92	@ 0x5c
 80007ce:	f000 f906 	bl	80009de <memset>
 80007d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000808 <std+0x58>)
 80007d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80007d6:	4b0d      	ldr	r3, [pc, #52]	@ (800080c <std+0x5c>)
 80007d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80007da:	4b0d      	ldr	r3, [pc, #52]	@ (8000810 <std+0x60>)
 80007dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80007de:	4b0d      	ldr	r3, [pc, #52]	@ (8000814 <std+0x64>)
 80007e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80007e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000818 <std+0x68>)
 80007e4:	6224      	str	r4, [r4, #32]
 80007e6:	429c      	cmp	r4, r3
 80007e8:	d006      	beq.n	80007f8 <std+0x48>
 80007ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80007ee:	4294      	cmp	r4, r2
 80007f0:	d002      	beq.n	80007f8 <std+0x48>
 80007f2:	33d0      	adds	r3, #208	@ 0xd0
 80007f4:	429c      	cmp	r4, r3
 80007f6:	d105      	bne.n	8000804 <std+0x54>
 80007f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80007fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000800:	f000 b966 	b.w	8000ad0 <__retarget_lock_init_recursive>
 8000804:	bd10      	pop	{r4, pc}
 8000806:	bf00      	nop
 8000808:	08000959 	.word	0x08000959
 800080c:	0800097b 	.word	0x0800097b
 8000810:	080009b3 	.word	0x080009b3
 8000814:	080009d7 	.word	0x080009d7
 8000818:	20000084 	.word	0x20000084

0800081c <stdio_exit_handler>:
 800081c:	4a02      	ldr	r2, [pc, #8]	@ (8000828 <stdio_exit_handler+0xc>)
 800081e:	4903      	ldr	r1, [pc, #12]	@ (800082c <stdio_exit_handler+0x10>)
 8000820:	4803      	ldr	r0, [pc, #12]	@ (8000830 <stdio_exit_handler+0x14>)
 8000822:	f000 b869 	b.w	80008f8 <_fwalk_sglue>
 8000826:	bf00      	nop
 8000828:	20000000 	.word	0x20000000
 800082c:	0800136d 	.word	0x0800136d
 8000830:	20000010 	.word	0x20000010

08000834 <cleanup_stdio>:
 8000834:	6841      	ldr	r1, [r0, #4]
 8000836:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <cleanup_stdio+0x34>)
 8000838:	4299      	cmp	r1, r3
 800083a:	b510      	push	{r4, lr}
 800083c:	4604      	mov	r4, r0
 800083e:	d001      	beq.n	8000844 <cleanup_stdio+0x10>
 8000840:	f000 fd94 	bl	800136c <_fflush_r>
 8000844:	68a1      	ldr	r1, [r4, #8]
 8000846:	4b09      	ldr	r3, [pc, #36]	@ (800086c <cleanup_stdio+0x38>)
 8000848:	4299      	cmp	r1, r3
 800084a:	d002      	beq.n	8000852 <cleanup_stdio+0x1e>
 800084c:	4620      	mov	r0, r4
 800084e:	f000 fd8d 	bl	800136c <_fflush_r>
 8000852:	68e1      	ldr	r1, [r4, #12]
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <cleanup_stdio+0x3c>)
 8000856:	4299      	cmp	r1, r3
 8000858:	d004      	beq.n	8000864 <cleanup_stdio+0x30>
 800085a:	4620      	mov	r0, r4
 800085c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000860:	f000 bd84 	b.w	800136c <_fflush_r>
 8000864:	bd10      	pop	{r4, pc}
 8000866:	bf00      	nop
 8000868:	20000084 	.word	0x20000084
 800086c:	200000ec 	.word	0x200000ec
 8000870:	20000154 	.word	0x20000154

08000874 <global_stdio_init.part.0>:
 8000874:	b510      	push	{r4, lr}
 8000876:	4b0b      	ldr	r3, [pc, #44]	@ (80008a4 <global_stdio_init.part.0+0x30>)
 8000878:	4c0b      	ldr	r4, [pc, #44]	@ (80008a8 <global_stdio_init.part.0+0x34>)
 800087a:	4a0c      	ldr	r2, [pc, #48]	@ (80008ac <global_stdio_init.part.0+0x38>)
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	4620      	mov	r0, r4
 8000880:	2200      	movs	r2, #0
 8000882:	2104      	movs	r1, #4
 8000884:	f7ff ff94 	bl	80007b0 <std>
 8000888:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800088c:	2201      	movs	r2, #1
 800088e:	2109      	movs	r1, #9
 8000890:	f7ff ff8e 	bl	80007b0 <std>
 8000894:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000898:	2202      	movs	r2, #2
 800089a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800089e:	2112      	movs	r1, #18
 80008a0:	f7ff bf86 	b.w	80007b0 <std>
 80008a4:	200001bc 	.word	0x200001bc
 80008a8:	20000084 	.word	0x20000084
 80008ac:	0800081d 	.word	0x0800081d

080008b0 <__sfp_lock_acquire>:
 80008b0:	4801      	ldr	r0, [pc, #4]	@ (80008b8 <__sfp_lock_acquire+0x8>)
 80008b2:	f000 b90e 	b.w	8000ad2 <__retarget_lock_acquire_recursive>
 80008b6:	bf00      	nop
 80008b8:	200001c5 	.word	0x200001c5

080008bc <__sfp_lock_release>:
 80008bc:	4801      	ldr	r0, [pc, #4]	@ (80008c4 <__sfp_lock_release+0x8>)
 80008be:	f000 b909 	b.w	8000ad4 <__retarget_lock_release_recursive>
 80008c2:	bf00      	nop
 80008c4:	200001c5 	.word	0x200001c5

080008c8 <__sinit>:
 80008c8:	b510      	push	{r4, lr}
 80008ca:	4604      	mov	r4, r0
 80008cc:	f7ff fff0 	bl	80008b0 <__sfp_lock_acquire>
 80008d0:	6a23      	ldr	r3, [r4, #32]
 80008d2:	b11b      	cbz	r3, 80008dc <__sinit+0x14>
 80008d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008d8:	f7ff bff0 	b.w	80008bc <__sfp_lock_release>
 80008dc:	4b04      	ldr	r3, [pc, #16]	@ (80008f0 <__sinit+0x28>)
 80008de:	6223      	str	r3, [r4, #32]
 80008e0:	4b04      	ldr	r3, [pc, #16]	@ (80008f4 <__sinit+0x2c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d1f5      	bne.n	80008d4 <__sinit+0xc>
 80008e8:	f7ff ffc4 	bl	8000874 <global_stdio_init.part.0>
 80008ec:	e7f2      	b.n	80008d4 <__sinit+0xc>
 80008ee:	bf00      	nop
 80008f0:	08000835 	.word	0x08000835
 80008f4:	200001bc 	.word	0x200001bc

080008f8 <_fwalk_sglue>:
 80008f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008fc:	4607      	mov	r7, r0
 80008fe:	4688      	mov	r8, r1
 8000900:	4614      	mov	r4, r2
 8000902:	2600      	movs	r6, #0
 8000904:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000908:	f1b9 0901 	subs.w	r9, r9, #1
 800090c:	d505      	bpl.n	800091a <_fwalk_sglue+0x22>
 800090e:	6824      	ldr	r4, [r4, #0]
 8000910:	2c00      	cmp	r4, #0
 8000912:	d1f7      	bne.n	8000904 <_fwalk_sglue+0xc>
 8000914:	4630      	mov	r0, r6
 8000916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800091a:	89ab      	ldrh	r3, [r5, #12]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d907      	bls.n	8000930 <_fwalk_sglue+0x38>
 8000920:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000924:	3301      	adds	r3, #1
 8000926:	d003      	beq.n	8000930 <_fwalk_sglue+0x38>
 8000928:	4629      	mov	r1, r5
 800092a:	4638      	mov	r0, r7
 800092c:	47c0      	blx	r8
 800092e:	4306      	orrs	r6, r0
 8000930:	3568      	adds	r5, #104	@ 0x68
 8000932:	e7e9      	b.n	8000908 <_fwalk_sglue+0x10>

08000934 <iprintf>:
 8000934:	b40f      	push	{r0, r1, r2, r3}
 8000936:	b507      	push	{r0, r1, r2, lr}
 8000938:	4906      	ldr	r1, [pc, #24]	@ (8000954 <iprintf+0x20>)
 800093a:	ab04      	add	r3, sp, #16
 800093c:	6808      	ldr	r0, [r1, #0]
 800093e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000942:	6881      	ldr	r1, [r0, #8]
 8000944:	9301      	str	r3, [sp, #4]
 8000946:	f000 f9e9 	bl	8000d1c <_vfiprintf_r>
 800094a:	b003      	add	sp, #12
 800094c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000950:	b004      	add	sp, #16
 8000952:	4770      	bx	lr
 8000954:	2000000c 	.word	0x2000000c

08000958 <__sread>:
 8000958:	b510      	push	{r4, lr}
 800095a:	460c      	mov	r4, r1
 800095c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000960:	f000 f868 	bl	8000a34 <_read_r>
 8000964:	2800      	cmp	r0, #0
 8000966:	bfab      	itete	ge
 8000968:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800096a:	89a3      	ldrhlt	r3, [r4, #12]
 800096c:	181b      	addge	r3, r3, r0
 800096e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000972:	bfac      	ite	ge
 8000974:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000976:	81a3      	strhlt	r3, [r4, #12]
 8000978:	bd10      	pop	{r4, pc}

0800097a <__swrite>:
 800097a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800097e:	461f      	mov	r7, r3
 8000980:	898b      	ldrh	r3, [r1, #12]
 8000982:	05db      	lsls	r3, r3, #23
 8000984:	4605      	mov	r5, r0
 8000986:	460c      	mov	r4, r1
 8000988:	4616      	mov	r6, r2
 800098a:	d505      	bpl.n	8000998 <__swrite+0x1e>
 800098c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000990:	2302      	movs	r3, #2
 8000992:	2200      	movs	r2, #0
 8000994:	f000 f83c 	bl	8000a10 <_lseek_r>
 8000998:	89a3      	ldrh	r3, [r4, #12]
 800099a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800099e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80009a2:	81a3      	strh	r3, [r4, #12]
 80009a4:	4632      	mov	r2, r6
 80009a6:	463b      	mov	r3, r7
 80009a8:	4628      	mov	r0, r5
 80009aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80009ae:	f000 b853 	b.w	8000a58 <_write_r>

080009b2 <__sseek>:
 80009b2:	b510      	push	{r4, lr}
 80009b4:	460c      	mov	r4, r1
 80009b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009ba:	f000 f829 	bl	8000a10 <_lseek_r>
 80009be:	1c43      	adds	r3, r0, #1
 80009c0:	89a3      	ldrh	r3, [r4, #12]
 80009c2:	bf15      	itete	ne
 80009c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80009c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80009ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80009ce:	81a3      	strheq	r3, [r4, #12]
 80009d0:	bf18      	it	ne
 80009d2:	81a3      	strhne	r3, [r4, #12]
 80009d4:	bd10      	pop	{r4, pc}

080009d6 <__sclose>:
 80009d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009da:	f000 b809 	b.w	80009f0 <_close_r>

080009de <memset>:
 80009de:	4402      	add	r2, r0
 80009e0:	4603      	mov	r3, r0
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d100      	bne.n	80009e8 <memset+0xa>
 80009e6:	4770      	bx	lr
 80009e8:	f803 1b01 	strb.w	r1, [r3], #1
 80009ec:	e7f9      	b.n	80009e2 <memset+0x4>
	...

080009f0 <_close_r>:
 80009f0:	b538      	push	{r3, r4, r5, lr}
 80009f2:	4d06      	ldr	r5, [pc, #24]	@ (8000a0c <_close_r+0x1c>)
 80009f4:	2300      	movs	r3, #0
 80009f6:	4604      	mov	r4, r0
 80009f8:	4608      	mov	r0, r1
 80009fa:	602b      	str	r3, [r5, #0]
 80009fc:	f7ff fd75 	bl	80004ea <_close>
 8000a00:	1c43      	adds	r3, r0, #1
 8000a02:	d102      	bne.n	8000a0a <_close_r+0x1a>
 8000a04:	682b      	ldr	r3, [r5, #0]
 8000a06:	b103      	cbz	r3, 8000a0a <_close_r+0x1a>
 8000a08:	6023      	str	r3, [r4, #0]
 8000a0a:	bd38      	pop	{r3, r4, r5, pc}
 8000a0c:	200001c0 	.word	0x200001c0

08000a10 <_lseek_r>:
 8000a10:	b538      	push	{r3, r4, r5, lr}
 8000a12:	4d07      	ldr	r5, [pc, #28]	@ (8000a30 <_lseek_r+0x20>)
 8000a14:	4604      	mov	r4, r0
 8000a16:	4608      	mov	r0, r1
 8000a18:	4611      	mov	r1, r2
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	602a      	str	r2, [r5, #0]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	f7ff fd8a 	bl	8000538 <_lseek>
 8000a24:	1c43      	adds	r3, r0, #1
 8000a26:	d102      	bne.n	8000a2e <_lseek_r+0x1e>
 8000a28:	682b      	ldr	r3, [r5, #0]
 8000a2a:	b103      	cbz	r3, 8000a2e <_lseek_r+0x1e>
 8000a2c:	6023      	str	r3, [r4, #0]
 8000a2e:	bd38      	pop	{r3, r4, r5, pc}
 8000a30:	200001c0 	.word	0x200001c0

08000a34 <_read_r>:
 8000a34:	b538      	push	{r3, r4, r5, lr}
 8000a36:	4d07      	ldr	r5, [pc, #28]	@ (8000a54 <_read_r+0x20>)
 8000a38:	4604      	mov	r4, r0
 8000a3a:	4608      	mov	r0, r1
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	2200      	movs	r2, #0
 8000a40:	602a      	str	r2, [r5, #0]
 8000a42:	461a      	mov	r2, r3
 8000a44:	f7ff fd18 	bl	8000478 <_read>
 8000a48:	1c43      	adds	r3, r0, #1
 8000a4a:	d102      	bne.n	8000a52 <_read_r+0x1e>
 8000a4c:	682b      	ldr	r3, [r5, #0]
 8000a4e:	b103      	cbz	r3, 8000a52 <_read_r+0x1e>
 8000a50:	6023      	str	r3, [r4, #0]
 8000a52:	bd38      	pop	{r3, r4, r5, pc}
 8000a54:	200001c0 	.word	0x200001c0

08000a58 <_write_r>:
 8000a58:	b538      	push	{r3, r4, r5, lr}
 8000a5a:	4d07      	ldr	r5, [pc, #28]	@ (8000a78 <_write_r+0x20>)
 8000a5c:	4604      	mov	r4, r0
 8000a5e:	4608      	mov	r0, r1
 8000a60:	4611      	mov	r1, r2
 8000a62:	2200      	movs	r2, #0
 8000a64:	602a      	str	r2, [r5, #0]
 8000a66:	461a      	mov	r2, r3
 8000a68:	f7ff fd23 	bl	80004b2 <_write>
 8000a6c:	1c43      	adds	r3, r0, #1
 8000a6e:	d102      	bne.n	8000a76 <_write_r+0x1e>
 8000a70:	682b      	ldr	r3, [r5, #0]
 8000a72:	b103      	cbz	r3, 8000a76 <_write_r+0x1e>
 8000a74:	6023      	str	r3, [r4, #0]
 8000a76:	bd38      	pop	{r3, r4, r5, pc}
 8000a78:	200001c0 	.word	0x200001c0

08000a7c <__errno>:
 8000a7c:	4b01      	ldr	r3, [pc, #4]	@ (8000a84 <__errno+0x8>)
 8000a7e:	6818      	ldr	r0, [r3, #0]
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	2000000c 	.word	0x2000000c

08000a88 <__libc_init_array>:
 8000a88:	b570      	push	{r4, r5, r6, lr}
 8000a8a:	4d0d      	ldr	r5, [pc, #52]	@ (8000ac0 <__libc_init_array+0x38>)
 8000a8c:	4c0d      	ldr	r4, [pc, #52]	@ (8000ac4 <__libc_init_array+0x3c>)
 8000a8e:	1b64      	subs	r4, r4, r5
 8000a90:	10a4      	asrs	r4, r4, #2
 8000a92:	2600      	movs	r6, #0
 8000a94:	42a6      	cmp	r6, r4
 8000a96:	d109      	bne.n	8000aac <__libc_init_array+0x24>
 8000a98:	4d0b      	ldr	r5, [pc, #44]	@ (8000ac8 <__libc_init_array+0x40>)
 8000a9a:	4c0c      	ldr	r4, [pc, #48]	@ (8000acc <__libc_init_array+0x44>)
 8000a9c:	f000 fdb6 	bl	800160c <_init>
 8000aa0:	1b64      	subs	r4, r4, r5
 8000aa2:	10a4      	asrs	r4, r4, #2
 8000aa4:	2600      	movs	r6, #0
 8000aa6:	42a6      	cmp	r6, r4
 8000aa8:	d105      	bne.n	8000ab6 <__libc_init_array+0x2e>
 8000aaa:	bd70      	pop	{r4, r5, r6, pc}
 8000aac:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ab0:	4798      	blx	r3
 8000ab2:	3601      	adds	r6, #1
 8000ab4:	e7ee      	b.n	8000a94 <__libc_init_array+0xc>
 8000ab6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aba:	4798      	blx	r3
 8000abc:	3601      	adds	r6, #1
 8000abe:	e7f2      	b.n	8000aa6 <__libc_init_array+0x1e>
 8000ac0:	08001670 	.word	0x08001670
 8000ac4:	08001670 	.word	0x08001670
 8000ac8:	08001670 	.word	0x08001670
 8000acc:	08001674 	.word	0x08001674

08000ad0 <__retarget_lock_init_recursive>:
 8000ad0:	4770      	bx	lr

08000ad2 <__retarget_lock_acquire_recursive>:
 8000ad2:	4770      	bx	lr

08000ad4 <__retarget_lock_release_recursive>:
 8000ad4:	4770      	bx	lr
	...

08000ad8 <_free_r>:
 8000ad8:	b538      	push	{r3, r4, r5, lr}
 8000ada:	4605      	mov	r5, r0
 8000adc:	2900      	cmp	r1, #0
 8000ade:	d041      	beq.n	8000b64 <_free_r+0x8c>
 8000ae0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ae4:	1f0c      	subs	r4, r1, #4
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	bfb8      	it	lt
 8000aea:	18e4      	addlt	r4, r4, r3
 8000aec:	f000 f8e0 	bl	8000cb0 <__malloc_lock>
 8000af0:	4a1d      	ldr	r2, [pc, #116]	@ (8000b68 <_free_r+0x90>)
 8000af2:	6813      	ldr	r3, [r2, #0]
 8000af4:	b933      	cbnz	r3, 8000b04 <_free_r+0x2c>
 8000af6:	6063      	str	r3, [r4, #4]
 8000af8:	6014      	str	r4, [r2, #0]
 8000afa:	4628      	mov	r0, r5
 8000afc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b00:	f000 b8dc 	b.w	8000cbc <__malloc_unlock>
 8000b04:	42a3      	cmp	r3, r4
 8000b06:	d908      	bls.n	8000b1a <_free_r+0x42>
 8000b08:	6820      	ldr	r0, [r4, #0]
 8000b0a:	1821      	adds	r1, r4, r0
 8000b0c:	428b      	cmp	r3, r1
 8000b0e:	bf01      	itttt	eq
 8000b10:	6819      	ldreq	r1, [r3, #0]
 8000b12:	685b      	ldreq	r3, [r3, #4]
 8000b14:	1809      	addeq	r1, r1, r0
 8000b16:	6021      	streq	r1, [r4, #0]
 8000b18:	e7ed      	b.n	8000af6 <_free_r+0x1e>
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	b10b      	cbz	r3, 8000b24 <_free_r+0x4c>
 8000b20:	42a3      	cmp	r3, r4
 8000b22:	d9fa      	bls.n	8000b1a <_free_r+0x42>
 8000b24:	6811      	ldr	r1, [r2, #0]
 8000b26:	1850      	adds	r0, r2, r1
 8000b28:	42a0      	cmp	r0, r4
 8000b2a:	d10b      	bne.n	8000b44 <_free_r+0x6c>
 8000b2c:	6820      	ldr	r0, [r4, #0]
 8000b2e:	4401      	add	r1, r0
 8000b30:	1850      	adds	r0, r2, r1
 8000b32:	4283      	cmp	r3, r0
 8000b34:	6011      	str	r1, [r2, #0]
 8000b36:	d1e0      	bne.n	8000afa <_free_r+0x22>
 8000b38:	6818      	ldr	r0, [r3, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	6053      	str	r3, [r2, #4]
 8000b3e:	4408      	add	r0, r1
 8000b40:	6010      	str	r0, [r2, #0]
 8000b42:	e7da      	b.n	8000afa <_free_r+0x22>
 8000b44:	d902      	bls.n	8000b4c <_free_r+0x74>
 8000b46:	230c      	movs	r3, #12
 8000b48:	602b      	str	r3, [r5, #0]
 8000b4a:	e7d6      	b.n	8000afa <_free_r+0x22>
 8000b4c:	6820      	ldr	r0, [r4, #0]
 8000b4e:	1821      	adds	r1, r4, r0
 8000b50:	428b      	cmp	r3, r1
 8000b52:	bf04      	itt	eq
 8000b54:	6819      	ldreq	r1, [r3, #0]
 8000b56:	685b      	ldreq	r3, [r3, #4]
 8000b58:	6063      	str	r3, [r4, #4]
 8000b5a:	bf04      	itt	eq
 8000b5c:	1809      	addeq	r1, r1, r0
 8000b5e:	6021      	streq	r1, [r4, #0]
 8000b60:	6054      	str	r4, [r2, #4]
 8000b62:	e7ca      	b.n	8000afa <_free_r+0x22>
 8000b64:	bd38      	pop	{r3, r4, r5, pc}
 8000b66:	bf00      	nop
 8000b68:	200001cc 	.word	0x200001cc

08000b6c <sbrk_aligned>:
 8000b6c:	b570      	push	{r4, r5, r6, lr}
 8000b6e:	4e0f      	ldr	r6, [pc, #60]	@ (8000bac <sbrk_aligned+0x40>)
 8000b70:	460c      	mov	r4, r1
 8000b72:	6831      	ldr	r1, [r6, #0]
 8000b74:	4605      	mov	r5, r0
 8000b76:	b911      	cbnz	r1, 8000b7e <sbrk_aligned+0x12>
 8000b78:	f000 fcb4 	bl	80014e4 <_sbrk_r>
 8000b7c:	6030      	str	r0, [r6, #0]
 8000b7e:	4621      	mov	r1, r4
 8000b80:	4628      	mov	r0, r5
 8000b82:	f000 fcaf 	bl	80014e4 <_sbrk_r>
 8000b86:	1c43      	adds	r3, r0, #1
 8000b88:	d103      	bne.n	8000b92 <sbrk_aligned+0x26>
 8000b8a:	f04f 34ff 	mov.w	r4, #4294967295
 8000b8e:	4620      	mov	r0, r4
 8000b90:	bd70      	pop	{r4, r5, r6, pc}
 8000b92:	1cc4      	adds	r4, r0, #3
 8000b94:	f024 0403 	bic.w	r4, r4, #3
 8000b98:	42a0      	cmp	r0, r4
 8000b9a:	d0f8      	beq.n	8000b8e <sbrk_aligned+0x22>
 8000b9c:	1a21      	subs	r1, r4, r0
 8000b9e:	4628      	mov	r0, r5
 8000ba0:	f000 fca0 	bl	80014e4 <_sbrk_r>
 8000ba4:	3001      	adds	r0, #1
 8000ba6:	d1f2      	bne.n	8000b8e <sbrk_aligned+0x22>
 8000ba8:	e7ef      	b.n	8000b8a <sbrk_aligned+0x1e>
 8000baa:	bf00      	nop
 8000bac:	200001c8 	.word	0x200001c8

08000bb0 <_malloc_r>:
 8000bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bb4:	1ccd      	adds	r5, r1, #3
 8000bb6:	f025 0503 	bic.w	r5, r5, #3
 8000bba:	3508      	adds	r5, #8
 8000bbc:	2d0c      	cmp	r5, #12
 8000bbe:	bf38      	it	cc
 8000bc0:	250c      	movcc	r5, #12
 8000bc2:	2d00      	cmp	r5, #0
 8000bc4:	4606      	mov	r6, r0
 8000bc6:	db01      	blt.n	8000bcc <_malloc_r+0x1c>
 8000bc8:	42a9      	cmp	r1, r5
 8000bca:	d904      	bls.n	8000bd6 <_malloc_r+0x26>
 8000bcc:	230c      	movs	r3, #12
 8000bce:	6033      	str	r3, [r6, #0]
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000cac <_malloc_r+0xfc>
 8000bda:	f000 f869 	bl	8000cb0 <__malloc_lock>
 8000bde:	f8d8 3000 	ldr.w	r3, [r8]
 8000be2:	461c      	mov	r4, r3
 8000be4:	bb44      	cbnz	r4, 8000c38 <_malloc_r+0x88>
 8000be6:	4629      	mov	r1, r5
 8000be8:	4630      	mov	r0, r6
 8000bea:	f7ff ffbf 	bl	8000b6c <sbrk_aligned>
 8000bee:	1c43      	adds	r3, r0, #1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	d158      	bne.n	8000ca6 <_malloc_r+0xf6>
 8000bf4:	f8d8 4000 	ldr.w	r4, [r8]
 8000bf8:	4627      	mov	r7, r4
 8000bfa:	2f00      	cmp	r7, #0
 8000bfc:	d143      	bne.n	8000c86 <_malloc_r+0xd6>
 8000bfe:	2c00      	cmp	r4, #0
 8000c00:	d04b      	beq.n	8000c9a <_malloc_r+0xea>
 8000c02:	6823      	ldr	r3, [r4, #0]
 8000c04:	4639      	mov	r1, r7
 8000c06:	4630      	mov	r0, r6
 8000c08:	eb04 0903 	add.w	r9, r4, r3
 8000c0c:	f000 fc6a 	bl	80014e4 <_sbrk_r>
 8000c10:	4581      	cmp	r9, r0
 8000c12:	d142      	bne.n	8000c9a <_malloc_r+0xea>
 8000c14:	6821      	ldr	r1, [r4, #0]
 8000c16:	1a6d      	subs	r5, r5, r1
 8000c18:	4629      	mov	r1, r5
 8000c1a:	4630      	mov	r0, r6
 8000c1c:	f7ff ffa6 	bl	8000b6c <sbrk_aligned>
 8000c20:	3001      	adds	r0, #1
 8000c22:	d03a      	beq.n	8000c9a <_malloc_r+0xea>
 8000c24:	6823      	ldr	r3, [r4, #0]
 8000c26:	442b      	add	r3, r5
 8000c28:	6023      	str	r3, [r4, #0]
 8000c2a:	f8d8 3000 	ldr.w	r3, [r8]
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	bb62      	cbnz	r2, 8000c8c <_malloc_r+0xdc>
 8000c32:	f8c8 7000 	str.w	r7, [r8]
 8000c36:	e00f      	b.n	8000c58 <_malloc_r+0xa8>
 8000c38:	6822      	ldr	r2, [r4, #0]
 8000c3a:	1b52      	subs	r2, r2, r5
 8000c3c:	d420      	bmi.n	8000c80 <_malloc_r+0xd0>
 8000c3e:	2a0b      	cmp	r2, #11
 8000c40:	d917      	bls.n	8000c72 <_malloc_r+0xc2>
 8000c42:	1961      	adds	r1, r4, r5
 8000c44:	42a3      	cmp	r3, r4
 8000c46:	6025      	str	r5, [r4, #0]
 8000c48:	bf18      	it	ne
 8000c4a:	6059      	strne	r1, [r3, #4]
 8000c4c:	6863      	ldr	r3, [r4, #4]
 8000c4e:	bf08      	it	eq
 8000c50:	f8c8 1000 	streq.w	r1, [r8]
 8000c54:	5162      	str	r2, [r4, r5]
 8000c56:	604b      	str	r3, [r1, #4]
 8000c58:	4630      	mov	r0, r6
 8000c5a:	f000 f82f 	bl	8000cbc <__malloc_unlock>
 8000c5e:	f104 000b 	add.w	r0, r4, #11
 8000c62:	1d23      	adds	r3, r4, #4
 8000c64:	f020 0007 	bic.w	r0, r0, #7
 8000c68:	1ac2      	subs	r2, r0, r3
 8000c6a:	bf1c      	itt	ne
 8000c6c:	1a1b      	subne	r3, r3, r0
 8000c6e:	50a3      	strne	r3, [r4, r2]
 8000c70:	e7af      	b.n	8000bd2 <_malloc_r+0x22>
 8000c72:	6862      	ldr	r2, [r4, #4]
 8000c74:	42a3      	cmp	r3, r4
 8000c76:	bf0c      	ite	eq
 8000c78:	f8c8 2000 	streq.w	r2, [r8]
 8000c7c:	605a      	strne	r2, [r3, #4]
 8000c7e:	e7eb      	b.n	8000c58 <_malloc_r+0xa8>
 8000c80:	4623      	mov	r3, r4
 8000c82:	6864      	ldr	r4, [r4, #4]
 8000c84:	e7ae      	b.n	8000be4 <_malloc_r+0x34>
 8000c86:	463c      	mov	r4, r7
 8000c88:	687f      	ldr	r7, [r7, #4]
 8000c8a:	e7b6      	b.n	8000bfa <_malloc_r+0x4a>
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	42a3      	cmp	r3, r4
 8000c92:	d1fb      	bne.n	8000c8c <_malloc_r+0xdc>
 8000c94:	2300      	movs	r3, #0
 8000c96:	6053      	str	r3, [r2, #4]
 8000c98:	e7de      	b.n	8000c58 <_malloc_r+0xa8>
 8000c9a:	230c      	movs	r3, #12
 8000c9c:	6033      	str	r3, [r6, #0]
 8000c9e:	4630      	mov	r0, r6
 8000ca0:	f000 f80c 	bl	8000cbc <__malloc_unlock>
 8000ca4:	e794      	b.n	8000bd0 <_malloc_r+0x20>
 8000ca6:	6005      	str	r5, [r0, #0]
 8000ca8:	e7d6      	b.n	8000c58 <_malloc_r+0xa8>
 8000caa:	bf00      	nop
 8000cac:	200001cc 	.word	0x200001cc

08000cb0 <__malloc_lock>:
 8000cb0:	4801      	ldr	r0, [pc, #4]	@ (8000cb8 <__malloc_lock+0x8>)
 8000cb2:	f7ff bf0e 	b.w	8000ad2 <__retarget_lock_acquire_recursive>
 8000cb6:	bf00      	nop
 8000cb8:	200001c4 	.word	0x200001c4

08000cbc <__malloc_unlock>:
 8000cbc:	4801      	ldr	r0, [pc, #4]	@ (8000cc4 <__malloc_unlock+0x8>)
 8000cbe:	f7ff bf09 	b.w	8000ad4 <__retarget_lock_release_recursive>
 8000cc2:	bf00      	nop
 8000cc4:	200001c4 	.word	0x200001c4

08000cc8 <__sfputc_r>:
 8000cc8:	6893      	ldr	r3, [r2, #8]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	b410      	push	{r4}
 8000cd0:	6093      	str	r3, [r2, #8]
 8000cd2:	da08      	bge.n	8000ce6 <__sfputc_r+0x1e>
 8000cd4:	6994      	ldr	r4, [r2, #24]
 8000cd6:	42a3      	cmp	r3, r4
 8000cd8:	db01      	blt.n	8000cde <__sfputc_r+0x16>
 8000cda:	290a      	cmp	r1, #10
 8000cdc:	d103      	bne.n	8000ce6 <__sfputc_r+0x1e>
 8000cde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ce2:	f000 bb6b 	b.w	80013bc <__swbuf_r>
 8000ce6:	6813      	ldr	r3, [r2, #0]
 8000ce8:	1c58      	adds	r0, r3, #1
 8000cea:	6010      	str	r0, [r2, #0]
 8000cec:	7019      	strb	r1, [r3, #0]
 8000cee:	4608      	mov	r0, r1
 8000cf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <__sfputs_r>:
 8000cf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cf8:	4606      	mov	r6, r0
 8000cfa:	460f      	mov	r7, r1
 8000cfc:	4614      	mov	r4, r2
 8000cfe:	18d5      	adds	r5, r2, r3
 8000d00:	42ac      	cmp	r4, r5
 8000d02:	d101      	bne.n	8000d08 <__sfputs_r+0x12>
 8000d04:	2000      	movs	r0, #0
 8000d06:	e007      	b.n	8000d18 <__sfputs_r+0x22>
 8000d08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d0c:	463a      	mov	r2, r7
 8000d0e:	4630      	mov	r0, r6
 8000d10:	f7ff ffda 	bl	8000cc8 <__sfputc_r>
 8000d14:	1c43      	adds	r3, r0, #1
 8000d16:	d1f3      	bne.n	8000d00 <__sfputs_r+0xa>
 8000d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000d1c <_vfiprintf_r>:
 8000d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d20:	460d      	mov	r5, r1
 8000d22:	b09d      	sub	sp, #116	@ 0x74
 8000d24:	4614      	mov	r4, r2
 8000d26:	4698      	mov	r8, r3
 8000d28:	4606      	mov	r6, r0
 8000d2a:	b118      	cbz	r0, 8000d34 <_vfiprintf_r+0x18>
 8000d2c:	6a03      	ldr	r3, [r0, #32]
 8000d2e:	b90b      	cbnz	r3, 8000d34 <_vfiprintf_r+0x18>
 8000d30:	f7ff fdca 	bl	80008c8 <__sinit>
 8000d34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d36:	07d9      	lsls	r1, r3, #31
 8000d38:	d405      	bmi.n	8000d46 <_vfiprintf_r+0x2a>
 8000d3a:	89ab      	ldrh	r3, [r5, #12]
 8000d3c:	059a      	lsls	r2, r3, #22
 8000d3e:	d402      	bmi.n	8000d46 <_vfiprintf_r+0x2a>
 8000d40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d42:	f7ff fec6 	bl	8000ad2 <__retarget_lock_acquire_recursive>
 8000d46:	89ab      	ldrh	r3, [r5, #12]
 8000d48:	071b      	lsls	r3, r3, #28
 8000d4a:	d501      	bpl.n	8000d50 <_vfiprintf_r+0x34>
 8000d4c:	692b      	ldr	r3, [r5, #16]
 8000d4e:	b99b      	cbnz	r3, 8000d78 <_vfiprintf_r+0x5c>
 8000d50:	4629      	mov	r1, r5
 8000d52:	4630      	mov	r0, r6
 8000d54:	f000 fb70 	bl	8001438 <__swsetup_r>
 8000d58:	b170      	cbz	r0, 8000d78 <_vfiprintf_r+0x5c>
 8000d5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d5c:	07dc      	lsls	r4, r3, #31
 8000d5e:	d504      	bpl.n	8000d6a <_vfiprintf_r+0x4e>
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295
 8000d64:	b01d      	add	sp, #116	@ 0x74
 8000d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d6a:	89ab      	ldrh	r3, [r5, #12]
 8000d6c:	0598      	lsls	r0, r3, #22
 8000d6e:	d4f7      	bmi.n	8000d60 <_vfiprintf_r+0x44>
 8000d70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d72:	f7ff feaf 	bl	8000ad4 <__retarget_lock_release_recursive>
 8000d76:	e7f3      	b.n	8000d60 <_vfiprintf_r+0x44>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d7c:	2320      	movs	r3, #32
 8000d7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000d82:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d86:	2330      	movs	r3, #48	@ 0x30
 8000d88:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000f38 <_vfiprintf_r+0x21c>
 8000d8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000d90:	f04f 0901 	mov.w	r9, #1
 8000d94:	4623      	mov	r3, r4
 8000d96:	469a      	mov	sl, r3
 8000d98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d9c:	b10a      	cbz	r2, 8000da2 <_vfiprintf_r+0x86>
 8000d9e:	2a25      	cmp	r2, #37	@ 0x25
 8000da0:	d1f9      	bne.n	8000d96 <_vfiprintf_r+0x7a>
 8000da2:	ebba 0b04 	subs.w	fp, sl, r4
 8000da6:	d00b      	beq.n	8000dc0 <_vfiprintf_r+0xa4>
 8000da8:	465b      	mov	r3, fp
 8000daa:	4622      	mov	r2, r4
 8000dac:	4629      	mov	r1, r5
 8000dae:	4630      	mov	r0, r6
 8000db0:	f7ff ffa1 	bl	8000cf6 <__sfputs_r>
 8000db4:	3001      	adds	r0, #1
 8000db6:	f000 80a7 	beq.w	8000f08 <_vfiprintf_r+0x1ec>
 8000dba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000dbc:	445a      	add	r2, fp
 8000dbe:	9209      	str	r2, [sp, #36]	@ 0x24
 8000dc0:	f89a 3000 	ldrb.w	r3, [sl]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	f000 809f 	beq.w	8000f08 <_vfiprintf_r+0x1ec>
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000dd4:	f10a 0a01 	add.w	sl, sl, #1
 8000dd8:	9304      	str	r3, [sp, #16]
 8000dda:	9307      	str	r3, [sp, #28]
 8000ddc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000de0:	931a      	str	r3, [sp, #104]	@ 0x68
 8000de2:	4654      	mov	r4, sl
 8000de4:	2205      	movs	r2, #5
 8000de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dea:	4853      	ldr	r0, [pc, #332]	@ (8000f38 <_vfiprintf_r+0x21c>)
 8000dec:	f7ff fa10 	bl	8000210 <memchr>
 8000df0:	9a04      	ldr	r2, [sp, #16]
 8000df2:	b9d8      	cbnz	r0, 8000e2c <_vfiprintf_r+0x110>
 8000df4:	06d1      	lsls	r1, r2, #27
 8000df6:	bf44      	itt	mi
 8000df8:	2320      	movmi	r3, #32
 8000dfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000dfe:	0713      	lsls	r3, r2, #28
 8000e00:	bf44      	itt	mi
 8000e02:	232b      	movmi	r3, #43	@ 0x2b
 8000e04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e08:	f89a 3000 	ldrb.w	r3, [sl]
 8000e0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e0e:	d015      	beq.n	8000e3c <_vfiprintf_r+0x120>
 8000e10:	9a07      	ldr	r2, [sp, #28]
 8000e12:	4654      	mov	r4, sl
 8000e14:	2000      	movs	r0, #0
 8000e16:	f04f 0c0a 	mov.w	ip, #10
 8000e1a:	4621      	mov	r1, r4
 8000e1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e20:	3b30      	subs	r3, #48	@ 0x30
 8000e22:	2b09      	cmp	r3, #9
 8000e24:	d94b      	bls.n	8000ebe <_vfiprintf_r+0x1a2>
 8000e26:	b1b0      	cbz	r0, 8000e56 <_vfiprintf_r+0x13a>
 8000e28:	9207      	str	r2, [sp, #28]
 8000e2a:	e014      	b.n	8000e56 <_vfiprintf_r+0x13a>
 8000e2c:	eba0 0308 	sub.w	r3, r0, r8
 8000e30:	fa09 f303 	lsl.w	r3, r9, r3
 8000e34:	4313      	orrs	r3, r2
 8000e36:	9304      	str	r3, [sp, #16]
 8000e38:	46a2      	mov	sl, r4
 8000e3a:	e7d2      	b.n	8000de2 <_vfiprintf_r+0xc6>
 8000e3c:	9b03      	ldr	r3, [sp, #12]
 8000e3e:	1d19      	adds	r1, r3, #4
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	9103      	str	r1, [sp, #12]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	bfbb      	ittet	lt
 8000e48:	425b      	neglt	r3, r3
 8000e4a:	f042 0202 	orrlt.w	r2, r2, #2
 8000e4e:	9307      	strge	r3, [sp, #28]
 8000e50:	9307      	strlt	r3, [sp, #28]
 8000e52:	bfb8      	it	lt
 8000e54:	9204      	strlt	r2, [sp, #16]
 8000e56:	7823      	ldrb	r3, [r4, #0]
 8000e58:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e5a:	d10a      	bne.n	8000e72 <_vfiprintf_r+0x156>
 8000e5c:	7863      	ldrb	r3, [r4, #1]
 8000e5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e60:	d132      	bne.n	8000ec8 <_vfiprintf_r+0x1ac>
 8000e62:	9b03      	ldr	r3, [sp, #12]
 8000e64:	1d1a      	adds	r2, r3, #4
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	9203      	str	r2, [sp, #12]
 8000e6a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000e6e:	3402      	adds	r4, #2
 8000e70:	9305      	str	r3, [sp, #20]
 8000e72:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000f48 <_vfiprintf_r+0x22c>
 8000e76:	7821      	ldrb	r1, [r4, #0]
 8000e78:	2203      	movs	r2, #3
 8000e7a:	4650      	mov	r0, sl
 8000e7c:	f7ff f9c8 	bl	8000210 <memchr>
 8000e80:	b138      	cbz	r0, 8000e92 <_vfiprintf_r+0x176>
 8000e82:	9b04      	ldr	r3, [sp, #16]
 8000e84:	eba0 000a 	sub.w	r0, r0, sl
 8000e88:	2240      	movs	r2, #64	@ 0x40
 8000e8a:	4082      	lsls	r2, r0
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	3401      	adds	r4, #1
 8000e90:	9304      	str	r3, [sp, #16]
 8000e92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e96:	4829      	ldr	r0, [pc, #164]	@ (8000f3c <_vfiprintf_r+0x220>)
 8000e98:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000e9c:	2206      	movs	r2, #6
 8000e9e:	f7ff f9b7 	bl	8000210 <memchr>
 8000ea2:	2800      	cmp	r0, #0
 8000ea4:	d03f      	beq.n	8000f26 <_vfiprintf_r+0x20a>
 8000ea6:	4b26      	ldr	r3, [pc, #152]	@ (8000f40 <_vfiprintf_r+0x224>)
 8000ea8:	bb1b      	cbnz	r3, 8000ef2 <_vfiprintf_r+0x1d6>
 8000eaa:	9b03      	ldr	r3, [sp, #12]
 8000eac:	3307      	adds	r3, #7
 8000eae:	f023 0307 	bic.w	r3, r3, #7
 8000eb2:	3308      	adds	r3, #8
 8000eb4:	9303      	str	r3, [sp, #12]
 8000eb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000eb8:	443b      	add	r3, r7
 8000eba:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ebc:	e76a      	b.n	8000d94 <_vfiprintf_r+0x78>
 8000ebe:	fb0c 3202 	mla	r2, ip, r2, r3
 8000ec2:	460c      	mov	r4, r1
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	e7a8      	b.n	8000e1a <_vfiprintf_r+0xfe>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	3401      	adds	r4, #1
 8000ecc:	9305      	str	r3, [sp, #20]
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f04f 0c0a 	mov.w	ip, #10
 8000ed4:	4620      	mov	r0, r4
 8000ed6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000eda:	3a30      	subs	r2, #48	@ 0x30
 8000edc:	2a09      	cmp	r2, #9
 8000ede:	d903      	bls.n	8000ee8 <_vfiprintf_r+0x1cc>
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d0c6      	beq.n	8000e72 <_vfiprintf_r+0x156>
 8000ee4:	9105      	str	r1, [sp, #20]
 8000ee6:	e7c4      	b.n	8000e72 <_vfiprintf_r+0x156>
 8000ee8:	fb0c 2101 	mla	r1, ip, r1, r2
 8000eec:	4604      	mov	r4, r0
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e7f0      	b.n	8000ed4 <_vfiprintf_r+0x1b8>
 8000ef2:	ab03      	add	r3, sp, #12
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	462a      	mov	r2, r5
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <_vfiprintf_r+0x228>)
 8000efa:	a904      	add	r1, sp, #16
 8000efc:	4630      	mov	r0, r6
 8000efe:	f3af 8000 	nop.w
 8000f02:	4607      	mov	r7, r0
 8000f04:	1c78      	adds	r0, r7, #1
 8000f06:	d1d6      	bne.n	8000eb6 <_vfiprintf_r+0x19a>
 8000f08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000f0a:	07d9      	lsls	r1, r3, #31
 8000f0c:	d405      	bmi.n	8000f1a <_vfiprintf_r+0x1fe>
 8000f0e:	89ab      	ldrh	r3, [r5, #12]
 8000f10:	059a      	lsls	r2, r3, #22
 8000f12:	d402      	bmi.n	8000f1a <_vfiprintf_r+0x1fe>
 8000f14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000f16:	f7ff fddd 	bl	8000ad4 <__retarget_lock_release_recursive>
 8000f1a:	89ab      	ldrh	r3, [r5, #12]
 8000f1c:	065b      	lsls	r3, r3, #25
 8000f1e:	f53f af1f 	bmi.w	8000d60 <_vfiprintf_r+0x44>
 8000f22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000f24:	e71e      	b.n	8000d64 <_vfiprintf_r+0x48>
 8000f26:	ab03      	add	r3, sp, #12
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	462a      	mov	r2, r5
 8000f2c:	4b05      	ldr	r3, [pc, #20]	@ (8000f44 <_vfiprintf_r+0x228>)
 8000f2e:	a904      	add	r1, sp, #16
 8000f30:	4630      	mov	r0, r6
 8000f32:	f000 f879 	bl	8001028 <_printf_i>
 8000f36:	e7e4      	b.n	8000f02 <_vfiprintf_r+0x1e6>
 8000f38:	08001635 	.word	0x08001635
 8000f3c:	0800163f 	.word	0x0800163f
 8000f40:	00000000 	.word	0x00000000
 8000f44:	08000cf7 	.word	0x08000cf7
 8000f48:	0800163b 	.word	0x0800163b

08000f4c <_printf_common>:
 8000f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f50:	4616      	mov	r6, r2
 8000f52:	4698      	mov	r8, r3
 8000f54:	688a      	ldr	r2, [r1, #8]
 8000f56:	690b      	ldr	r3, [r1, #16]
 8000f58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	bfb8      	it	lt
 8000f60:	4613      	movlt	r3, r2
 8000f62:	6033      	str	r3, [r6, #0]
 8000f64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000f68:	4607      	mov	r7, r0
 8000f6a:	460c      	mov	r4, r1
 8000f6c:	b10a      	cbz	r2, 8000f72 <_printf_common+0x26>
 8000f6e:	3301      	adds	r3, #1
 8000f70:	6033      	str	r3, [r6, #0]
 8000f72:	6823      	ldr	r3, [r4, #0]
 8000f74:	0699      	lsls	r1, r3, #26
 8000f76:	bf42      	ittt	mi
 8000f78:	6833      	ldrmi	r3, [r6, #0]
 8000f7a:	3302      	addmi	r3, #2
 8000f7c:	6033      	strmi	r3, [r6, #0]
 8000f7e:	6825      	ldr	r5, [r4, #0]
 8000f80:	f015 0506 	ands.w	r5, r5, #6
 8000f84:	d106      	bne.n	8000f94 <_printf_common+0x48>
 8000f86:	f104 0a19 	add.w	sl, r4, #25
 8000f8a:	68e3      	ldr	r3, [r4, #12]
 8000f8c:	6832      	ldr	r2, [r6, #0]
 8000f8e:	1a9b      	subs	r3, r3, r2
 8000f90:	42ab      	cmp	r3, r5
 8000f92:	dc26      	bgt.n	8000fe2 <_printf_common+0x96>
 8000f94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000f98:	6822      	ldr	r2, [r4, #0]
 8000f9a:	3b00      	subs	r3, #0
 8000f9c:	bf18      	it	ne
 8000f9e:	2301      	movne	r3, #1
 8000fa0:	0692      	lsls	r2, r2, #26
 8000fa2:	d42b      	bmi.n	8000ffc <_printf_common+0xb0>
 8000fa4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000fa8:	4641      	mov	r1, r8
 8000faa:	4638      	mov	r0, r7
 8000fac:	47c8      	blx	r9
 8000fae:	3001      	adds	r0, #1
 8000fb0:	d01e      	beq.n	8000ff0 <_printf_common+0xa4>
 8000fb2:	6823      	ldr	r3, [r4, #0]
 8000fb4:	6922      	ldr	r2, [r4, #16]
 8000fb6:	f003 0306 	and.w	r3, r3, #6
 8000fba:	2b04      	cmp	r3, #4
 8000fbc:	bf02      	ittt	eq
 8000fbe:	68e5      	ldreq	r5, [r4, #12]
 8000fc0:	6833      	ldreq	r3, [r6, #0]
 8000fc2:	1aed      	subeq	r5, r5, r3
 8000fc4:	68a3      	ldr	r3, [r4, #8]
 8000fc6:	bf0c      	ite	eq
 8000fc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000fcc:	2500      	movne	r5, #0
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	bfc4      	itt	gt
 8000fd2:	1a9b      	subgt	r3, r3, r2
 8000fd4:	18ed      	addgt	r5, r5, r3
 8000fd6:	2600      	movs	r6, #0
 8000fd8:	341a      	adds	r4, #26
 8000fda:	42b5      	cmp	r5, r6
 8000fdc:	d11a      	bne.n	8001014 <_printf_common+0xc8>
 8000fde:	2000      	movs	r0, #0
 8000fe0:	e008      	b.n	8000ff4 <_printf_common+0xa8>
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	4652      	mov	r2, sl
 8000fe6:	4641      	mov	r1, r8
 8000fe8:	4638      	mov	r0, r7
 8000fea:	47c8      	blx	r9
 8000fec:	3001      	adds	r0, #1
 8000fee:	d103      	bne.n	8000ff8 <_printf_common+0xac>
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff8:	3501      	adds	r5, #1
 8000ffa:	e7c6      	b.n	8000f8a <_printf_common+0x3e>
 8000ffc:	18e1      	adds	r1, r4, r3
 8000ffe:	1c5a      	adds	r2, r3, #1
 8001000:	2030      	movs	r0, #48	@ 0x30
 8001002:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001006:	4422      	add	r2, r4
 8001008:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800100c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001010:	3302      	adds	r3, #2
 8001012:	e7c7      	b.n	8000fa4 <_printf_common+0x58>
 8001014:	2301      	movs	r3, #1
 8001016:	4622      	mov	r2, r4
 8001018:	4641      	mov	r1, r8
 800101a:	4638      	mov	r0, r7
 800101c:	47c8      	blx	r9
 800101e:	3001      	adds	r0, #1
 8001020:	d0e6      	beq.n	8000ff0 <_printf_common+0xa4>
 8001022:	3601      	adds	r6, #1
 8001024:	e7d9      	b.n	8000fda <_printf_common+0x8e>
	...

08001028 <_printf_i>:
 8001028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800102c:	7e0f      	ldrb	r7, [r1, #24]
 800102e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001030:	2f78      	cmp	r7, #120	@ 0x78
 8001032:	4691      	mov	r9, r2
 8001034:	4680      	mov	r8, r0
 8001036:	460c      	mov	r4, r1
 8001038:	469a      	mov	sl, r3
 800103a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800103e:	d807      	bhi.n	8001050 <_printf_i+0x28>
 8001040:	2f62      	cmp	r7, #98	@ 0x62
 8001042:	d80a      	bhi.n	800105a <_printf_i+0x32>
 8001044:	2f00      	cmp	r7, #0
 8001046:	f000 80d1 	beq.w	80011ec <_printf_i+0x1c4>
 800104a:	2f58      	cmp	r7, #88	@ 0x58
 800104c:	f000 80b8 	beq.w	80011c0 <_printf_i+0x198>
 8001050:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001054:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001058:	e03a      	b.n	80010d0 <_printf_i+0xa8>
 800105a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800105e:	2b15      	cmp	r3, #21
 8001060:	d8f6      	bhi.n	8001050 <_printf_i+0x28>
 8001062:	a101      	add	r1, pc, #4	@ (adr r1, 8001068 <_printf_i+0x40>)
 8001064:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001068:	080010c1 	.word	0x080010c1
 800106c:	080010d5 	.word	0x080010d5
 8001070:	08001051 	.word	0x08001051
 8001074:	08001051 	.word	0x08001051
 8001078:	08001051 	.word	0x08001051
 800107c:	08001051 	.word	0x08001051
 8001080:	080010d5 	.word	0x080010d5
 8001084:	08001051 	.word	0x08001051
 8001088:	08001051 	.word	0x08001051
 800108c:	08001051 	.word	0x08001051
 8001090:	08001051 	.word	0x08001051
 8001094:	080011d3 	.word	0x080011d3
 8001098:	080010ff 	.word	0x080010ff
 800109c:	0800118d 	.word	0x0800118d
 80010a0:	08001051 	.word	0x08001051
 80010a4:	08001051 	.word	0x08001051
 80010a8:	080011f5 	.word	0x080011f5
 80010ac:	08001051 	.word	0x08001051
 80010b0:	080010ff 	.word	0x080010ff
 80010b4:	08001051 	.word	0x08001051
 80010b8:	08001051 	.word	0x08001051
 80010bc:	08001195 	.word	0x08001195
 80010c0:	6833      	ldr	r3, [r6, #0]
 80010c2:	1d1a      	adds	r2, r3, #4
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	6032      	str	r2, [r6, #0]
 80010c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80010cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80010d0:	2301      	movs	r3, #1
 80010d2:	e09c      	b.n	800120e <_printf_i+0x1e6>
 80010d4:	6833      	ldr	r3, [r6, #0]
 80010d6:	6820      	ldr	r0, [r4, #0]
 80010d8:	1d19      	adds	r1, r3, #4
 80010da:	6031      	str	r1, [r6, #0]
 80010dc:	0606      	lsls	r6, r0, #24
 80010de:	d501      	bpl.n	80010e4 <_printf_i+0xbc>
 80010e0:	681d      	ldr	r5, [r3, #0]
 80010e2:	e003      	b.n	80010ec <_printf_i+0xc4>
 80010e4:	0645      	lsls	r5, r0, #25
 80010e6:	d5fb      	bpl.n	80010e0 <_printf_i+0xb8>
 80010e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80010ec:	2d00      	cmp	r5, #0
 80010ee:	da03      	bge.n	80010f8 <_printf_i+0xd0>
 80010f0:	232d      	movs	r3, #45	@ 0x2d
 80010f2:	426d      	negs	r5, r5
 80010f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80010f8:	4858      	ldr	r0, [pc, #352]	@ (800125c <_printf_i+0x234>)
 80010fa:	230a      	movs	r3, #10
 80010fc:	e011      	b.n	8001122 <_printf_i+0xfa>
 80010fe:	6821      	ldr	r1, [r4, #0]
 8001100:	6833      	ldr	r3, [r6, #0]
 8001102:	0608      	lsls	r0, r1, #24
 8001104:	f853 5b04 	ldr.w	r5, [r3], #4
 8001108:	d402      	bmi.n	8001110 <_printf_i+0xe8>
 800110a:	0649      	lsls	r1, r1, #25
 800110c:	bf48      	it	mi
 800110e:	b2ad      	uxthmi	r5, r5
 8001110:	2f6f      	cmp	r7, #111	@ 0x6f
 8001112:	4852      	ldr	r0, [pc, #328]	@ (800125c <_printf_i+0x234>)
 8001114:	6033      	str	r3, [r6, #0]
 8001116:	bf14      	ite	ne
 8001118:	230a      	movne	r3, #10
 800111a:	2308      	moveq	r3, #8
 800111c:	2100      	movs	r1, #0
 800111e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001122:	6866      	ldr	r6, [r4, #4]
 8001124:	60a6      	str	r6, [r4, #8]
 8001126:	2e00      	cmp	r6, #0
 8001128:	db05      	blt.n	8001136 <_printf_i+0x10e>
 800112a:	6821      	ldr	r1, [r4, #0]
 800112c:	432e      	orrs	r6, r5
 800112e:	f021 0104 	bic.w	r1, r1, #4
 8001132:	6021      	str	r1, [r4, #0]
 8001134:	d04b      	beq.n	80011ce <_printf_i+0x1a6>
 8001136:	4616      	mov	r6, r2
 8001138:	fbb5 f1f3 	udiv	r1, r5, r3
 800113c:	fb03 5711 	mls	r7, r3, r1, r5
 8001140:	5dc7      	ldrb	r7, [r0, r7]
 8001142:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001146:	462f      	mov	r7, r5
 8001148:	42bb      	cmp	r3, r7
 800114a:	460d      	mov	r5, r1
 800114c:	d9f4      	bls.n	8001138 <_printf_i+0x110>
 800114e:	2b08      	cmp	r3, #8
 8001150:	d10b      	bne.n	800116a <_printf_i+0x142>
 8001152:	6823      	ldr	r3, [r4, #0]
 8001154:	07df      	lsls	r7, r3, #31
 8001156:	d508      	bpl.n	800116a <_printf_i+0x142>
 8001158:	6923      	ldr	r3, [r4, #16]
 800115a:	6861      	ldr	r1, [r4, #4]
 800115c:	4299      	cmp	r1, r3
 800115e:	bfde      	ittt	le
 8001160:	2330      	movle	r3, #48	@ 0x30
 8001162:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001166:	f106 36ff 	addle.w	r6, r6, #4294967295
 800116a:	1b92      	subs	r2, r2, r6
 800116c:	6122      	str	r2, [r4, #16]
 800116e:	f8cd a000 	str.w	sl, [sp]
 8001172:	464b      	mov	r3, r9
 8001174:	aa03      	add	r2, sp, #12
 8001176:	4621      	mov	r1, r4
 8001178:	4640      	mov	r0, r8
 800117a:	f7ff fee7 	bl	8000f4c <_printf_common>
 800117e:	3001      	adds	r0, #1
 8001180:	d14a      	bne.n	8001218 <_printf_i+0x1f0>
 8001182:	f04f 30ff 	mov.w	r0, #4294967295
 8001186:	b004      	add	sp, #16
 8001188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800118c:	6823      	ldr	r3, [r4, #0]
 800118e:	f043 0320 	orr.w	r3, r3, #32
 8001192:	6023      	str	r3, [r4, #0]
 8001194:	4832      	ldr	r0, [pc, #200]	@ (8001260 <_printf_i+0x238>)
 8001196:	2778      	movs	r7, #120	@ 0x78
 8001198:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800119c:	6823      	ldr	r3, [r4, #0]
 800119e:	6831      	ldr	r1, [r6, #0]
 80011a0:	061f      	lsls	r7, r3, #24
 80011a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80011a6:	d402      	bmi.n	80011ae <_printf_i+0x186>
 80011a8:	065f      	lsls	r7, r3, #25
 80011aa:	bf48      	it	mi
 80011ac:	b2ad      	uxthmi	r5, r5
 80011ae:	6031      	str	r1, [r6, #0]
 80011b0:	07d9      	lsls	r1, r3, #31
 80011b2:	bf44      	itt	mi
 80011b4:	f043 0320 	orrmi.w	r3, r3, #32
 80011b8:	6023      	strmi	r3, [r4, #0]
 80011ba:	b11d      	cbz	r5, 80011c4 <_printf_i+0x19c>
 80011bc:	2310      	movs	r3, #16
 80011be:	e7ad      	b.n	800111c <_printf_i+0xf4>
 80011c0:	4826      	ldr	r0, [pc, #152]	@ (800125c <_printf_i+0x234>)
 80011c2:	e7e9      	b.n	8001198 <_printf_i+0x170>
 80011c4:	6823      	ldr	r3, [r4, #0]
 80011c6:	f023 0320 	bic.w	r3, r3, #32
 80011ca:	6023      	str	r3, [r4, #0]
 80011cc:	e7f6      	b.n	80011bc <_printf_i+0x194>
 80011ce:	4616      	mov	r6, r2
 80011d0:	e7bd      	b.n	800114e <_printf_i+0x126>
 80011d2:	6833      	ldr	r3, [r6, #0]
 80011d4:	6825      	ldr	r5, [r4, #0]
 80011d6:	6961      	ldr	r1, [r4, #20]
 80011d8:	1d18      	adds	r0, r3, #4
 80011da:	6030      	str	r0, [r6, #0]
 80011dc:	062e      	lsls	r6, r5, #24
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	d501      	bpl.n	80011e6 <_printf_i+0x1be>
 80011e2:	6019      	str	r1, [r3, #0]
 80011e4:	e002      	b.n	80011ec <_printf_i+0x1c4>
 80011e6:	0668      	lsls	r0, r5, #25
 80011e8:	d5fb      	bpl.n	80011e2 <_printf_i+0x1ba>
 80011ea:	8019      	strh	r1, [r3, #0]
 80011ec:	2300      	movs	r3, #0
 80011ee:	6123      	str	r3, [r4, #16]
 80011f0:	4616      	mov	r6, r2
 80011f2:	e7bc      	b.n	800116e <_printf_i+0x146>
 80011f4:	6833      	ldr	r3, [r6, #0]
 80011f6:	1d1a      	adds	r2, r3, #4
 80011f8:	6032      	str	r2, [r6, #0]
 80011fa:	681e      	ldr	r6, [r3, #0]
 80011fc:	6862      	ldr	r2, [r4, #4]
 80011fe:	2100      	movs	r1, #0
 8001200:	4630      	mov	r0, r6
 8001202:	f7ff f805 	bl	8000210 <memchr>
 8001206:	b108      	cbz	r0, 800120c <_printf_i+0x1e4>
 8001208:	1b80      	subs	r0, r0, r6
 800120a:	6060      	str	r0, [r4, #4]
 800120c:	6863      	ldr	r3, [r4, #4]
 800120e:	6123      	str	r3, [r4, #16]
 8001210:	2300      	movs	r3, #0
 8001212:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001216:	e7aa      	b.n	800116e <_printf_i+0x146>
 8001218:	6923      	ldr	r3, [r4, #16]
 800121a:	4632      	mov	r2, r6
 800121c:	4649      	mov	r1, r9
 800121e:	4640      	mov	r0, r8
 8001220:	47d0      	blx	sl
 8001222:	3001      	adds	r0, #1
 8001224:	d0ad      	beq.n	8001182 <_printf_i+0x15a>
 8001226:	6823      	ldr	r3, [r4, #0]
 8001228:	079b      	lsls	r3, r3, #30
 800122a:	d413      	bmi.n	8001254 <_printf_i+0x22c>
 800122c:	68e0      	ldr	r0, [r4, #12]
 800122e:	9b03      	ldr	r3, [sp, #12]
 8001230:	4298      	cmp	r0, r3
 8001232:	bfb8      	it	lt
 8001234:	4618      	movlt	r0, r3
 8001236:	e7a6      	b.n	8001186 <_printf_i+0x15e>
 8001238:	2301      	movs	r3, #1
 800123a:	4632      	mov	r2, r6
 800123c:	4649      	mov	r1, r9
 800123e:	4640      	mov	r0, r8
 8001240:	47d0      	blx	sl
 8001242:	3001      	adds	r0, #1
 8001244:	d09d      	beq.n	8001182 <_printf_i+0x15a>
 8001246:	3501      	adds	r5, #1
 8001248:	68e3      	ldr	r3, [r4, #12]
 800124a:	9903      	ldr	r1, [sp, #12]
 800124c:	1a5b      	subs	r3, r3, r1
 800124e:	42ab      	cmp	r3, r5
 8001250:	dcf2      	bgt.n	8001238 <_printf_i+0x210>
 8001252:	e7eb      	b.n	800122c <_printf_i+0x204>
 8001254:	2500      	movs	r5, #0
 8001256:	f104 0619 	add.w	r6, r4, #25
 800125a:	e7f5      	b.n	8001248 <_printf_i+0x220>
 800125c:	08001646 	.word	0x08001646
 8001260:	08001657 	.word	0x08001657

08001264 <__sflush_r>:
 8001264:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800126c:	0716      	lsls	r6, r2, #28
 800126e:	4605      	mov	r5, r0
 8001270:	460c      	mov	r4, r1
 8001272:	d454      	bmi.n	800131e <__sflush_r+0xba>
 8001274:	684b      	ldr	r3, [r1, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	dc02      	bgt.n	8001280 <__sflush_r+0x1c>
 800127a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800127c:	2b00      	cmp	r3, #0
 800127e:	dd48      	ble.n	8001312 <__sflush_r+0xae>
 8001280:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001282:	2e00      	cmp	r6, #0
 8001284:	d045      	beq.n	8001312 <__sflush_r+0xae>
 8001286:	2300      	movs	r3, #0
 8001288:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800128c:	682f      	ldr	r7, [r5, #0]
 800128e:	6a21      	ldr	r1, [r4, #32]
 8001290:	602b      	str	r3, [r5, #0]
 8001292:	d030      	beq.n	80012f6 <__sflush_r+0x92>
 8001294:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001296:	89a3      	ldrh	r3, [r4, #12]
 8001298:	0759      	lsls	r1, r3, #29
 800129a:	d505      	bpl.n	80012a8 <__sflush_r+0x44>
 800129c:	6863      	ldr	r3, [r4, #4]
 800129e:	1ad2      	subs	r2, r2, r3
 80012a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80012a2:	b10b      	cbz	r3, 80012a8 <__sflush_r+0x44>
 80012a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80012a6:	1ad2      	subs	r2, r2, r3
 80012a8:	2300      	movs	r3, #0
 80012aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80012ac:	6a21      	ldr	r1, [r4, #32]
 80012ae:	4628      	mov	r0, r5
 80012b0:	47b0      	blx	r6
 80012b2:	1c43      	adds	r3, r0, #1
 80012b4:	89a3      	ldrh	r3, [r4, #12]
 80012b6:	d106      	bne.n	80012c6 <__sflush_r+0x62>
 80012b8:	6829      	ldr	r1, [r5, #0]
 80012ba:	291d      	cmp	r1, #29
 80012bc:	d82b      	bhi.n	8001316 <__sflush_r+0xb2>
 80012be:	4a2a      	ldr	r2, [pc, #168]	@ (8001368 <__sflush_r+0x104>)
 80012c0:	40ca      	lsrs	r2, r1
 80012c2:	07d6      	lsls	r6, r2, #31
 80012c4:	d527      	bpl.n	8001316 <__sflush_r+0xb2>
 80012c6:	2200      	movs	r2, #0
 80012c8:	6062      	str	r2, [r4, #4]
 80012ca:	04d9      	lsls	r1, r3, #19
 80012cc:	6922      	ldr	r2, [r4, #16]
 80012ce:	6022      	str	r2, [r4, #0]
 80012d0:	d504      	bpl.n	80012dc <__sflush_r+0x78>
 80012d2:	1c42      	adds	r2, r0, #1
 80012d4:	d101      	bne.n	80012da <__sflush_r+0x76>
 80012d6:	682b      	ldr	r3, [r5, #0]
 80012d8:	b903      	cbnz	r3, 80012dc <__sflush_r+0x78>
 80012da:	6560      	str	r0, [r4, #84]	@ 0x54
 80012dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80012de:	602f      	str	r7, [r5, #0]
 80012e0:	b1b9      	cbz	r1, 8001312 <__sflush_r+0xae>
 80012e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80012e6:	4299      	cmp	r1, r3
 80012e8:	d002      	beq.n	80012f0 <__sflush_r+0x8c>
 80012ea:	4628      	mov	r0, r5
 80012ec:	f7ff fbf4 	bl	8000ad8 <_free_r>
 80012f0:	2300      	movs	r3, #0
 80012f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80012f4:	e00d      	b.n	8001312 <__sflush_r+0xae>
 80012f6:	2301      	movs	r3, #1
 80012f8:	4628      	mov	r0, r5
 80012fa:	47b0      	blx	r6
 80012fc:	4602      	mov	r2, r0
 80012fe:	1c50      	adds	r0, r2, #1
 8001300:	d1c9      	bne.n	8001296 <__sflush_r+0x32>
 8001302:	682b      	ldr	r3, [r5, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d0c6      	beq.n	8001296 <__sflush_r+0x32>
 8001308:	2b1d      	cmp	r3, #29
 800130a:	d001      	beq.n	8001310 <__sflush_r+0xac>
 800130c:	2b16      	cmp	r3, #22
 800130e:	d11e      	bne.n	800134e <__sflush_r+0xea>
 8001310:	602f      	str	r7, [r5, #0]
 8001312:	2000      	movs	r0, #0
 8001314:	e022      	b.n	800135c <__sflush_r+0xf8>
 8001316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800131a:	b21b      	sxth	r3, r3
 800131c:	e01b      	b.n	8001356 <__sflush_r+0xf2>
 800131e:	690f      	ldr	r7, [r1, #16]
 8001320:	2f00      	cmp	r7, #0
 8001322:	d0f6      	beq.n	8001312 <__sflush_r+0xae>
 8001324:	0793      	lsls	r3, r2, #30
 8001326:	680e      	ldr	r6, [r1, #0]
 8001328:	bf08      	it	eq
 800132a:	694b      	ldreq	r3, [r1, #20]
 800132c:	600f      	str	r7, [r1, #0]
 800132e:	bf18      	it	ne
 8001330:	2300      	movne	r3, #0
 8001332:	eba6 0807 	sub.w	r8, r6, r7
 8001336:	608b      	str	r3, [r1, #8]
 8001338:	f1b8 0f00 	cmp.w	r8, #0
 800133c:	dde9      	ble.n	8001312 <__sflush_r+0xae>
 800133e:	6a21      	ldr	r1, [r4, #32]
 8001340:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001342:	4643      	mov	r3, r8
 8001344:	463a      	mov	r2, r7
 8001346:	4628      	mov	r0, r5
 8001348:	47b0      	blx	r6
 800134a:	2800      	cmp	r0, #0
 800134c:	dc08      	bgt.n	8001360 <__sflush_r+0xfc>
 800134e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001352:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001356:	81a3      	strh	r3, [r4, #12]
 8001358:	f04f 30ff 	mov.w	r0, #4294967295
 800135c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001360:	4407      	add	r7, r0
 8001362:	eba8 0800 	sub.w	r8, r8, r0
 8001366:	e7e7      	b.n	8001338 <__sflush_r+0xd4>
 8001368:	20400001 	.word	0x20400001

0800136c <_fflush_r>:
 800136c:	b538      	push	{r3, r4, r5, lr}
 800136e:	690b      	ldr	r3, [r1, #16]
 8001370:	4605      	mov	r5, r0
 8001372:	460c      	mov	r4, r1
 8001374:	b913      	cbnz	r3, 800137c <_fflush_r+0x10>
 8001376:	2500      	movs	r5, #0
 8001378:	4628      	mov	r0, r5
 800137a:	bd38      	pop	{r3, r4, r5, pc}
 800137c:	b118      	cbz	r0, 8001386 <_fflush_r+0x1a>
 800137e:	6a03      	ldr	r3, [r0, #32]
 8001380:	b90b      	cbnz	r3, 8001386 <_fflush_r+0x1a>
 8001382:	f7ff faa1 	bl	80008c8 <__sinit>
 8001386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f3      	beq.n	8001376 <_fflush_r+0xa>
 800138e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001390:	07d0      	lsls	r0, r2, #31
 8001392:	d404      	bmi.n	800139e <_fflush_r+0x32>
 8001394:	0599      	lsls	r1, r3, #22
 8001396:	d402      	bmi.n	800139e <_fflush_r+0x32>
 8001398:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800139a:	f7ff fb9a 	bl	8000ad2 <__retarget_lock_acquire_recursive>
 800139e:	4628      	mov	r0, r5
 80013a0:	4621      	mov	r1, r4
 80013a2:	f7ff ff5f 	bl	8001264 <__sflush_r>
 80013a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80013a8:	07da      	lsls	r2, r3, #31
 80013aa:	4605      	mov	r5, r0
 80013ac:	d4e4      	bmi.n	8001378 <_fflush_r+0xc>
 80013ae:	89a3      	ldrh	r3, [r4, #12]
 80013b0:	059b      	lsls	r3, r3, #22
 80013b2:	d4e1      	bmi.n	8001378 <_fflush_r+0xc>
 80013b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80013b6:	f7ff fb8d 	bl	8000ad4 <__retarget_lock_release_recursive>
 80013ba:	e7dd      	b.n	8001378 <_fflush_r+0xc>

080013bc <__swbuf_r>:
 80013bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013be:	460e      	mov	r6, r1
 80013c0:	4614      	mov	r4, r2
 80013c2:	4605      	mov	r5, r0
 80013c4:	b118      	cbz	r0, 80013ce <__swbuf_r+0x12>
 80013c6:	6a03      	ldr	r3, [r0, #32]
 80013c8:	b90b      	cbnz	r3, 80013ce <__swbuf_r+0x12>
 80013ca:	f7ff fa7d 	bl	80008c8 <__sinit>
 80013ce:	69a3      	ldr	r3, [r4, #24]
 80013d0:	60a3      	str	r3, [r4, #8]
 80013d2:	89a3      	ldrh	r3, [r4, #12]
 80013d4:	071a      	lsls	r2, r3, #28
 80013d6:	d501      	bpl.n	80013dc <__swbuf_r+0x20>
 80013d8:	6923      	ldr	r3, [r4, #16]
 80013da:	b943      	cbnz	r3, 80013ee <__swbuf_r+0x32>
 80013dc:	4621      	mov	r1, r4
 80013de:	4628      	mov	r0, r5
 80013e0:	f000 f82a 	bl	8001438 <__swsetup_r>
 80013e4:	b118      	cbz	r0, 80013ee <__swbuf_r+0x32>
 80013e6:	f04f 37ff 	mov.w	r7, #4294967295
 80013ea:	4638      	mov	r0, r7
 80013ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013ee:	6823      	ldr	r3, [r4, #0]
 80013f0:	6922      	ldr	r2, [r4, #16]
 80013f2:	1a98      	subs	r0, r3, r2
 80013f4:	6963      	ldr	r3, [r4, #20]
 80013f6:	b2f6      	uxtb	r6, r6
 80013f8:	4283      	cmp	r3, r0
 80013fa:	4637      	mov	r7, r6
 80013fc:	dc05      	bgt.n	800140a <__swbuf_r+0x4e>
 80013fe:	4621      	mov	r1, r4
 8001400:	4628      	mov	r0, r5
 8001402:	f7ff ffb3 	bl	800136c <_fflush_r>
 8001406:	2800      	cmp	r0, #0
 8001408:	d1ed      	bne.n	80013e6 <__swbuf_r+0x2a>
 800140a:	68a3      	ldr	r3, [r4, #8]
 800140c:	3b01      	subs	r3, #1
 800140e:	60a3      	str	r3, [r4, #8]
 8001410:	6823      	ldr	r3, [r4, #0]
 8001412:	1c5a      	adds	r2, r3, #1
 8001414:	6022      	str	r2, [r4, #0]
 8001416:	701e      	strb	r6, [r3, #0]
 8001418:	6962      	ldr	r2, [r4, #20]
 800141a:	1c43      	adds	r3, r0, #1
 800141c:	429a      	cmp	r2, r3
 800141e:	d004      	beq.n	800142a <__swbuf_r+0x6e>
 8001420:	89a3      	ldrh	r3, [r4, #12]
 8001422:	07db      	lsls	r3, r3, #31
 8001424:	d5e1      	bpl.n	80013ea <__swbuf_r+0x2e>
 8001426:	2e0a      	cmp	r6, #10
 8001428:	d1df      	bne.n	80013ea <__swbuf_r+0x2e>
 800142a:	4621      	mov	r1, r4
 800142c:	4628      	mov	r0, r5
 800142e:	f7ff ff9d 	bl	800136c <_fflush_r>
 8001432:	2800      	cmp	r0, #0
 8001434:	d0d9      	beq.n	80013ea <__swbuf_r+0x2e>
 8001436:	e7d6      	b.n	80013e6 <__swbuf_r+0x2a>

08001438 <__swsetup_r>:
 8001438:	b538      	push	{r3, r4, r5, lr}
 800143a:	4b29      	ldr	r3, [pc, #164]	@ (80014e0 <__swsetup_r+0xa8>)
 800143c:	4605      	mov	r5, r0
 800143e:	6818      	ldr	r0, [r3, #0]
 8001440:	460c      	mov	r4, r1
 8001442:	b118      	cbz	r0, 800144c <__swsetup_r+0x14>
 8001444:	6a03      	ldr	r3, [r0, #32]
 8001446:	b90b      	cbnz	r3, 800144c <__swsetup_r+0x14>
 8001448:	f7ff fa3e 	bl	80008c8 <__sinit>
 800144c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001450:	0719      	lsls	r1, r3, #28
 8001452:	d422      	bmi.n	800149a <__swsetup_r+0x62>
 8001454:	06da      	lsls	r2, r3, #27
 8001456:	d407      	bmi.n	8001468 <__swsetup_r+0x30>
 8001458:	2209      	movs	r2, #9
 800145a:	602a      	str	r2, [r5, #0]
 800145c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001460:	81a3      	strh	r3, [r4, #12]
 8001462:	f04f 30ff 	mov.w	r0, #4294967295
 8001466:	e033      	b.n	80014d0 <__swsetup_r+0x98>
 8001468:	0758      	lsls	r0, r3, #29
 800146a:	d512      	bpl.n	8001492 <__swsetup_r+0x5a>
 800146c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800146e:	b141      	cbz	r1, 8001482 <__swsetup_r+0x4a>
 8001470:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001474:	4299      	cmp	r1, r3
 8001476:	d002      	beq.n	800147e <__swsetup_r+0x46>
 8001478:	4628      	mov	r0, r5
 800147a:	f7ff fb2d 	bl	8000ad8 <_free_r>
 800147e:	2300      	movs	r3, #0
 8001480:	6363      	str	r3, [r4, #52]	@ 0x34
 8001482:	89a3      	ldrh	r3, [r4, #12]
 8001484:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001488:	81a3      	strh	r3, [r4, #12]
 800148a:	2300      	movs	r3, #0
 800148c:	6063      	str	r3, [r4, #4]
 800148e:	6923      	ldr	r3, [r4, #16]
 8001490:	6023      	str	r3, [r4, #0]
 8001492:	89a3      	ldrh	r3, [r4, #12]
 8001494:	f043 0308 	orr.w	r3, r3, #8
 8001498:	81a3      	strh	r3, [r4, #12]
 800149a:	6923      	ldr	r3, [r4, #16]
 800149c:	b94b      	cbnz	r3, 80014b2 <__swsetup_r+0x7a>
 800149e:	89a3      	ldrh	r3, [r4, #12]
 80014a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80014a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014a8:	d003      	beq.n	80014b2 <__swsetup_r+0x7a>
 80014aa:	4621      	mov	r1, r4
 80014ac:	4628      	mov	r0, r5
 80014ae:	f000 f84f 	bl	8001550 <__smakebuf_r>
 80014b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014b6:	f013 0201 	ands.w	r2, r3, #1
 80014ba:	d00a      	beq.n	80014d2 <__swsetup_r+0x9a>
 80014bc:	2200      	movs	r2, #0
 80014be:	60a2      	str	r2, [r4, #8]
 80014c0:	6962      	ldr	r2, [r4, #20]
 80014c2:	4252      	negs	r2, r2
 80014c4:	61a2      	str	r2, [r4, #24]
 80014c6:	6922      	ldr	r2, [r4, #16]
 80014c8:	b942      	cbnz	r2, 80014dc <__swsetup_r+0xa4>
 80014ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80014ce:	d1c5      	bne.n	800145c <__swsetup_r+0x24>
 80014d0:	bd38      	pop	{r3, r4, r5, pc}
 80014d2:	0799      	lsls	r1, r3, #30
 80014d4:	bf58      	it	pl
 80014d6:	6962      	ldrpl	r2, [r4, #20]
 80014d8:	60a2      	str	r2, [r4, #8]
 80014da:	e7f4      	b.n	80014c6 <__swsetup_r+0x8e>
 80014dc:	2000      	movs	r0, #0
 80014de:	e7f7      	b.n	80014d0 <__swsetup_r+0x98>
 80014e0:	2000000c 	.word	0x2000000c

080014e4 <_sbrk_r>:
 80014e4:	b538      	push	{r3, r4, r5, lr}
 80014e6:	4d06      	ldr	r5, [pc, #24]	@ (8001500 <_sbrk_r+0x1c>)
 80014e8:	2300      	movs	r3, #0
 80014ea:	4604      	mov	r4, r0
 80014ec:	4608      	mov	r0, r1
 80014ee:	602b      	str	r3, [r5, #0]
 80014f0:	f7ff f830 	bl	8000554 <_sbrk>
 80014f4:	1c43      	adds	r3, r0, #1
 80014f6:	d102      	bne.n	80014fe <_sbrk_r+0x1a>
 80014f8:	682b      	ldr	r3, [r5, #0]
 80014fa:	b103      	cbz	r3, 80014fe <_sbrk_r+0x1a>
 80014fc:	6023      	str	r3, [r4, #0]
 80014fe:	bd38      	pop	{r3, r4, r5, pc}
 8001500:	200001c0 	.word	0x200001c0

08001504 <__swhatbuf_r>:
 8001504:	b570      	push	{r4, r5, r6, lr}
 8001506:	460c      	mov	r4, r1
 8001508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800150c:	2900      	cmp	r1, #0
 800150e:	b096      	sub	sp, #88	@ 0x58
 8001510:	4615      	mov	r5, r2
 8001512:	461e      	mov	r6, r3
 8001514:	da0d      	bge.n	8001532 <__swhatbuf_r+0x2e>
 8001516:	89a3      	ldrh	r3, [r4, #12]
 8001518:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800151c:	f04f 0100 	mov.w	r1, #0
 8001520:	bf14      	ite	ne
 8001522:	2340      	movne	r3, #64	@ 0x40
 8001524:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001528:	2000      	movs	r0, #0
 800152a:	6031      	str	r1, [r6, #0]
 800152c:	602b      	str	r3, [r5, #0]
 800152e:	b016      	add	sp, #88	@ 0x58
 8001530:	bd70      	pop	{r4, r5, r6, pc}
 8001532:	466a      	mov	r2, sp
 8001534:	f000 f848 	bl	80015c8 <_fstat_r>
 8001538:	2800      	cmp	r0, #0
 800153a:	dbec      	blt.n	8001516 <__swhatbuf_r+0x12>
 800153c:	9901      	ldr	r1, [sp, #4]
 800153e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001542:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001546:	4259      	negs	r1, r3
 8001548:	4159      	adcs	r1, r3
 800154a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800154e:	e7eb      	b.n	8001528 <__swhatbuf_r+0x24>

08001550 <__smakebuf_r>:
 8001550:	898b      	ldrh	r3, [r1, #12]
 8001552:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001554:	079d      	lsls	r5, r3, #30
 8001556:	4606      	mov	r6, r0
 8001558:	460c      	mov	r4, r1
 800155a:	d507      	bpl.n	800156c <__smakebuf_r+0x1c>
 800155c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001560:	6023      	str	r3, [r4, #0]
 8001562:	6123      	str	r3, [r4, #16]
 8001564:	2301      	movs	r3, #1
 8001566:	6163      	str	r3, [r4, #20]
 8001568:	b003      	add	sp, #12
 800156a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800156c:	ab01      	add	r3, sp, #4
 800156e:	466a      	mov	r2, sp
 8001570:	f7ff ffc8 	bl	8001504 <__swhatbuf_r>
 8001574:	9f00      	ldr	r7, [sp, #0]
 8001576:	4605      	mov	r5, r0
 8001578:	4639      	mov	r1, r7
 800157a:	4630      	mov	r0, r6
 800157c:	f7ff fb18 	bl	8000bb0 <_malloc_r>
 8001580:	b948      	cbnz	r0, 8001596 <__smakebuf_r+0x46>
 8001582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001586:	059a      	lsls	r2, r3, #22
 8001588:	d4ee      	bmi.n	8001568 <__smakebuf_r+0x18>
 800158a:	f023 0303 	bic.w	r3, r3, #3
 800158e:	f043 0302 	orr.w	r3, r3, #2
 8001592:	81a3      	strh	r3, [r4, #12]
 8001594:	e7e2      	b.n	800155c <__smakebuf_r+0xc>
 8001596:	89a3      	ldrh	r3, [r4, #12]
 8001598:	6020      	str	r0, [r4, #0]
 800159a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800159e:	81a3      	strh	r3, [r4, #12]
 80015a0:	9b01      	ldr	r3, [sp, #4]
 80015a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80015a6:	b15b      	cbz	r3, 80015c0 <__smakebuf_r+0x70>
 80015a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80015ac:	4630      	mov	r0, r6
 80015ae:	f000 f81d 	bl	80015ec <_isatty_r>
 80015b2:	b128      	cbz	r0, 80015c0 <__smakebuf_r+0x70>
 80015b4:	89a3      	ldrh	r3, [r4, #12]
 80015b6:	f023 0303 	bic.w	r3, r3, #3
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	81a3      	strh	r3, [r4, #12]
 80015c0:	89a3      	ldrh	r3, [r4, #12]
 80015c2:	431d      	orrs	r5, r3
 80015c4:	81a5      	strh	r5, [r4, #12]
 80015c6:	e7cf      	b.n	8001568 <__smakebuf_r+0x18>

080015c8 <_fstat_r>:
 80015c8:	b538      	push	{r3, r4, r5, lr}
 80015ca:	4d07      	ldr	r5, [pc, #28]	@ (80015e8 <_fstat_r+0x20>)
 80015cc:	2300      	movs	r3, #0
 80015ce:	4604      	mov	r4, r0
 80015d0:	4608      	mov	r0, r1
 80015d2:	4611      	mov	r1, r2
 80015d4:	602b      	str	r3, [r5, #0]
 80015d6:	f7fe ff94 	bl	8000502 <_fstat>
 80015da:	1c43      	adds	r3, r0, #1
 80015dc:	d102      	bne.n	80015e4 <_fstat_r+0x1c>
 80015de:	682b      	ldr	r3, [r5, #0]
 80015e0:	b103      	cbz	r3, 80015e4 <_fstat_r+0x1c>
 80015e2:	6023      	str	r3, [r4, #0]
 80015e4:	bd38      	pop	{r3, r4, r5, pc}
 80015e6:	bf00      	nop
 80015e8:	200001c0 	.word	0x200001c0

080015ec <_isatty_r>:
 80015ec:	b538      	push	{r3, r4, r5, lr}
 80015ee:	4d06      	ldr	r5, [pc, #24]	@ (8001608 <_isatty_r+0x1c>)
 80015f0:	2300      	movs	r3, #0
 80015f2:	4604      	mov	r4, r0
 80015f4:	4608      	mov	r0, r1
 80015f6:	602b      	str	r3, [r5, #0]
 80015f8:	f7fe ff93 	bl	8000522 <_isatty>
 80015fc:	1c43      	adds	r3, r0, #1
 80015fe:	d102      	bne.n	8001606 <_isatty_r+0x1a>
 8001600:	682b      	ldr	r3, [r5, #0]
 8001602:	b103      	cbz	r3, 8001606 <_isatty_r+0x1a>
 8001604:	6023      	str	r3, [r4, #0]
 8001606:	bd38      	pop	{r3, r4, r5, pc}
 8001608:	200001c0 	.word	0x200001c0

0800160c <_init>:
 800160c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800160e:	bf00      	nop
 8001610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001612:	bc08      	pop	{r3}
 8001614:	469e      	mov	lr, r3
 8001616:	4770      	bx	lr

08001618 <_fini>:
 8001618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800161a:	bf00      	nop
 800161c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800161e:	bc08      	pop	{r3}
 8001620:	469e      	mov	lr, r3
 8001622:	4770      	bx	lr
